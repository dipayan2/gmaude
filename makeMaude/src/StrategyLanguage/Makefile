# Makefile.in generated by automake 1.16.5 from Makefile.am.
# src/StrategyLanguage/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/maude
pkgincludedir = $(includedir)/maude
pkglibdir = $(libdir)/maude
pkglibexecdir = $(libexecdir)/maude
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
subdir = src/StrategyLanguage
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_have_poll.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(noinst_HEADERS) \
	$(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
AM_V_AR = $(am__v_AR_$(V))
am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 = 
libstrategyLanguage_a_AR = $(AR) $(ARFLAGS)
libstrategyLanguage_a_LIBADD =
am_libstrategyLanguage_a_OBJECTS =  \
	libstrategyLanguage_a-strategyExpression.$(OBJEXT) \
	libstrategyLanguage_a-trivialStrategy.$(OBJEXT) \
	libstrategyLanguage_a-applicationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-concatenationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-iterationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-branchStrategy.$(OBJEXT) \
	libstrategyLanguage_a-unionStrategy.$(OBJEXT) \
	libstrategyLanguage_a-testStrategy.$(OBJEXT) \
	libstrategyLanguage_a-subtermStrategy.$(OBJEXT) \
	libstrategyLanguage_a-callStrategy.$(OBJEXT) \
	libstrategyLanguage_a-strategicExecution.$(OBJEXT) \
	libstrategyLanguage_a-strategicTask.$(OBJEXT) \
	libstrategyLanguage_a-branchTask.$(OBJEXT) \
	libstrategyLanguage_a-strategicProcess.$(OBJEXT) \
	libstrategyLanguage_a-decompositionProcess.$(OBJEXT) \
	libstrategyLanguage_a-applicationProcess.$(OBJEXT) \
	libstrategyLanguage_a-strategicSearch.$(OBJEXT) \
	libstrategyLanguage_a-depthFirstStrategicSearch.$(OBJEXT) \
	libstrategyLanguage_a-fairStrategicSearch.$(OBJEXT) \
	libstrategyLanguage_a-matchProcess.$(OBJEXT) \
	libstrategyLanguage_a-subtermProcess.$(OBJEXT) \
	libstrategyLanguage_a-rewriteTask.$(OBJEXT) \
	libstrategyLanguage_a-subtermTask.$(OBJEXT) \
	libstrategyLanguage_a-callTask.$(OBJEXT) \
	libstrategyLanguage_a-callProcess.$(OBJEXT) \
	libstrategyLanguage_a-strategyStackManager.$(OBJEXT) \
	libstrategyLanguage_a-variableBindingsManager.$(OBJEXT) \
	libstrategyLanguage_a-oneStrategy.$(OBJEXT) \
	libstrategyLanguage_a-oneTask.$(OBJEXT)
libstrategyLanguage_a_OBJECTS = $(am_libstrategyLanguage_a_OBJECTS)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade =  \
	./$(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-branchTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-callProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-callStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-callTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po \
	./$(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po \
	./$(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-matchProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-oneTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategicTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po \
	./$(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po \
	./$(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po \
	./$(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-subtermTask.Po \
	./$(DEPDIR)/libstrategyLanguage_a-testStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po \
	./$(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(libstrategyLanguage_a_SOURCES)
DIST_SOURCES = $(libstrategyLanguage_a_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/mkinstalldirs ChangeLog
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} '/home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/missing' aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} '/home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/missing' autoconf
AUTOHEADER = ${SHELL} '/home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/missing' autoheader
AUTOMAKE = ${SHELL} '/home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/missing' automake-1.16
AWK = mawk
BISON = bison
BUDDY_LIB = -lbdd
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -Wall -O2 -fomit-frame-pointer -fforce-addr -mpreferred-stack-boundary=4 
CPPFLAGS = 
CSCOPE = cscope
CTAGS = ctags
CVC4_LIB = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -Wall -O2 -fomit-frame-pointer -fforce-addr -mpreferred-stack-boundary=4 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
ETAGS = etags
EXEEXT = 
FLEX = flex
GCC_LIBS = 
GMP_LIBS = -lgmpxx -lgmp
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBSIGSEGV_LIB = -lsigsegv
LTLIBOBJS = 
MAKEINFO = ${SHELL} '/home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/missing' makeinfo
MKDIR_P = /usr/bin/mkdir -p
OBJEXT = o
PACKAGE = maude
PACKAGE_BUGREPORT = maude-bugs@lists.cs.illinois.edu
PACKAGE_NAME = Maude
PACKAGE_STRING = Maude 3.5beta
PACKAGE_TARNAME = maude
PACKAGE_URL = 
PACKAGE_VERSION = 3.5beta
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
TECLA_LIBS = -ltecla
VERSION = 3.5beta
YICES2_LIB = -lyices
abs_builddir = /home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/src/StrategyLanguage
abs_srcdir = /home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/src/StrategyLanguage
abs_top_builddir = /home/dipayan2/Desktop/MAUDE/gmaude/makeMaude
abs_top_srcdir = /home/dipayan2/Desktop/MAUDE/gmaude/makeMaude
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/dipayan2/Desktop/MAUDE/gmaude/makeMaude/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
noinst_LIBRARIES = libstrategyLanguage.a
libstrategyLanguage_a_CPPFLAGS = \
	-I$(top_srcdir)/src/Utility \
	-I$(top_srcdir)/src/Interface \
	-I$(top_srcdir)/src/Variable \
	-I$(top_srcdir)/src/Core \
	-I$(top_srcdir)/src/Higher \
	-I$(top_srcdir)/src/FullCompiler

libstrategyLanguage_a_SOURCES = \
	strategyExpression.cc \
	trivialStrategy.cc \
	applicationStrategy.cc \
	concatenationStrategy.cc \
	iterationStrategy.cc \
	branchStrategy.cc \
	unionStrategy.cc \
	testStrategy.cc \
	subtermStrategy.cc \
	callStrategy.cc \
	strategicExecution.cc \
	strategicTask.cc \
	branchTask.cc \
	strategicProcess.cc \
	decompositionProcess.cc \
	applicationProcess.cc \
	strategicSearch.cc \
	depthFirstStrategicSearch.cc \
	fairStrategicSearch.cc \
	matchProcess.cc \
	subtermProcess.cc \
	rewriteTask.cc \
	subtermTask.cc \
	callTask.cc \
	callProcess.cc \
	strategyStackManager.cc \
	variableBindingsManager.cc \
	oneStrategy.cc \
	oneTask.cc

noinst_HEADERS = \
	strategyLanguage.hh \
	strategyExpression.hh \
	trivialStrategy.hh \
	applicationStrategy.hh \
	concatenationStrategy.hh \
	iterationStrategy.hh \
	branchStrategy.hh \
	unionStrategy.hh \
	testStrategy.hh \
	subtermStrategy.hh \
	callStrategy.hh \
	strategicExecution.hh \
	strategicTask.hh \
	branchTask.hh \
	strategicProcess.hh \
	decompositionProcess.hh \
	applicationProcess.hh \
	strategicSearch.hh \
	depthFirstStrategicSearch.hh \
	fairStrategicSearch.hh \
	matchProcess.hh \
	subtermProcess.hh \
	rewriteTask.hh \
	subtermTask.hh \
	callTask.hh \
	callProcess.hh \
	strategyStackManager.hh \
	variableBindingsManager.hh \
	oneStrategy.hh \
	oneTask.hh

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/StrategyLanguage/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/StrategyLanguage/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)

libstrategyLanguage.a: $(libstrategyLanguage_a_OBJECTS) $(libstrategyLanguage_a_DEPENDENCIES) $(EXTRA_libstrategyLanguage_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libstrategyLanguage.a
	$(AM_V_AR)$(libstrategyLanguage_a_AR) libstrategyLanguage.a $(libstrategyLanguage_a_OBJECTS) $(libstrategyLanguage_a_LIBADD)
	$(AM_V_at)$(RANLIB) libstrategyLanguage.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-branchTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-callProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-callStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-callTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-matchProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-oneTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategicTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-subtermTask.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-testStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po # am--include-marker
include ./$(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

libstrategyLanguage_a-strategyExpression.o: strategyExpression.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyExpression.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Tpo -c -o libstrategyLanguage_a-strategyExpression.o `test -f 'strategyExpression.cc' || echo '$(srcdir)/'`strategyExpression.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po
#	$(AM_V_CXX)source='strategyExpression.cc' object='libstrategyLanguage_a-strategyExpression.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyExpression.o `test -f 'strategyExpression.cc' || echo '$(srcdir)/'`strategyExpression.cc

libstrategyLanguage_a-strategyExpression.obj: strategyExpression.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyExpression.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Tpo -c -o libstrategyLanguage_a-strategyExpression.obj `if test -f 'strategyExpression.cc'; then $(CYGPATH_W) 'strategyExpression.cc'; else $(CYGPATH_W) '$(srcdir)/strategyExpression.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po
#	$(AM_V_CXX)source='strategyExpression.cc' object='libstrategyLanguage_a-strategyExpression.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyExpression.obj `if test -f 'strategyExpression.cc'; then $(CYGPATH_W) 'strategyExpression.cc'; else $(CYGPATH_W) '$(srcdir)/strategyExpression.cc'; fi`

libstrategyLanguage_a-trivialStrategy.o: trivialStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-trivialStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo -c -o libstrategyLanguage_a-trivialStrategy.o `test -f 'trivialStrategy.cc' || echo '$(srcdir)/'`trivialStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
#	$(AM_V_CXX)source='trivialStrategy.cc' object='libstrategyLanguage_a-trivialStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-trivialStrategy.o `test -f 'trivialStrategy.cc' || echo '$(srcdir)/'`trivialStrategy.cc

libstrategyLanguage_a-trivialStrategy.obj: trivialStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-trivialStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo -c -o libstrategyLanguage_a-trivialStrategy.obj `if test -f 'trivialStrategy.cc'; then $(CYGPATH_W) 'trivialStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/trivialStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
#	$(AM_V_CXX)source='trivialStrategy.cc' object='libstrategyLanguage_a-trivialStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-trivialStrategy.obj `if test -f 'trivialStrategy.cc'; then $(CYGPATH_W) 'trivialStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/trivialStrategy.cc'; fi`

libstrategyLanguage_a-applicationStrategy.o: applicationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo -c -o libstrategyLanguage_a-applicationStrategy.o `test -f 'applicationStrategy.cc' || echo '$(srcdir)/'`applicationStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
#	$(AM_V_CXX)source='applicationStrategy.cc' object='libstrategyLanguage_a-applicationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationStrategy.o `test -f 'applicationStrategy.cc' || echo '$(srcdir)/'`applicationStrategy.cc

libstrategyLanguage_a-applicationStrategy.obj: applicationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo -c -o libstrategyLanguage_a-applicationStrategy.obj `if test -f 'applicationStrategy.cc'; then $(CYGPATH_W) 'applicationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/applicationStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
#	$(AM_V_CXX)source='applicationStrategy.cc' object='libstrategyLanguage_a-applicationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationStrategy.obj `if test -f 'applicationStrategy.cc'; then $(CYGPATH_W) 'applicationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/applicationStrategy.cc'; fi`

libstrategyLanguage_a-concatenationStrategy.o: concatenationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-concatenationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo -c -o libstrategyLanguage_a-concatenationStrategy.o `test -f 'concatenationStrategy.cc' || echo '$(srcdir)/'`concatenationStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
#	$(AM_V_CXX)source='concatenationStrategy.cc' object='libstrategyLanguage_a-concatenationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-concatenationStrategy.o `test -f 'concatenationStrategy.cc' || echo '$(srcdir)/'`concatenationStrategy.cc

libstrategyLanguage_a-concatenationStrategy.obj: concatenationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-concatenationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo -c -o libstrategyLanguage_a-concatenationStrategy.obj `if test -f 'concatenationStrategy.cc'; then $(CYGPATH_W) 'concatenationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/concatenationStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
#	$(AM_V_CXX)source='concatenationStrategy.cc' object='libstrategyLanguage_a-concatenationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-concatenationStrategy.obj `if test -f 'concatenationStrategy.cc'; then $(CYGPATH_W) 'concatenationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/concatenationStrategy.cc'; fi`

libstrategyLanguage_a-iterationStrategy.o: iterationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-iterationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo -c -o libstrategyLanguage_a-iterationStrategy.o `test -f 'iterationStrategy.cc' || echo '$(srcdir)/'`iterationStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
#	$(AM_V_CXX)source='iterationStrategy.cc' object='libstrategyLanguage_a-iterationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-iterationStrategy.o `test -f 'iterationStrategy.cc' || echo '$(srcdir)/'`iterationStrategy.cc

libstrategyLanguage_a-iterationStrategy.obj: iterationStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-iterationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo -c -o libstrategyLanguage_a-iterationStrategy.obj `if test -f 'iterationStrategy.cc'; then $(CYGPATH_W) 'iterationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/iterationStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
#	$(AM_V_CXX)source='iterationStrategy.cc' object='libstrategyLanguage_a-iterationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-iterationStrategy.obj `if test -f 'iterationStrategy.cc'; then $(CYGPATH_W) 'iterationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/iterationStrategy.cc'; fi`

libstrategyLanguage_a-branchStrategy.o: branchStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo -c -o libstrategyLanguage_a-branchStrategy.o `test -f 'branchStrategy.cc' || echo '$(srcdir)/'`branchStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
#	$(AM_V_CXX)source='branchStrategy.cc' object='libstrategyLanguage_a-branchStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchStrategy.o `test -f 'branchStrategy.cc' || echo '$(srcdir)/'`branchStrategy.cc

libstrategyLanguage_a-branchStrategy.obj: branchStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo -c -o libstrategyLanguage_a-branchStrategy.obj `if test -f 'branchStrategy.cc'; then $(CYGPATH_W) 'branchStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/branchStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
#	$(AM_V_CXX)source='branchStrategy.cc' object='libstrategyLanguage_a-branchStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchStrategy.obj `if test -f 'branchStrategy.cc'; then $(CYGPATH_W) 'branchStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/branchStrategy.cc'; fi`

libstrategyLanguage_a-unionStrategy.o: unionStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-unionStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo -c -o libstrategyLanguage_a-unionStrategy.o `test -f 'unionStrategy.cc' || echo '$(srcdir)/'`unionStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
#	$(AM_V_CXX)source='unionStrategy.cc' object='libstrategyLanguage_a-unionStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-unionStrategy.o `test -f 'unionStrategy.cc' || echo '$(srcdir)/'`unionStrategy.cc

libstrategyLanguage_a-unionStrategy.obj: unionStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-unionStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo -c -o libstrategyLanguage_a-unionStrategy.obj `if test -f 'unionStrategy.cc'; then $(CYGPATH_W) 'unionStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/unionStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
#	$(AM_V_CXX)source='unionStrategy.cc' object='libstrategyLanguage_a-unionStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-unionStrategy.obj `if test -f 'unionStrategy.cc'; then $(CYGPATH_W) 'unionStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/unionStrategy.cc'; fi`

libstrategyLanguage_a-testStrategy.o: testStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-testStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo -c -o libstrategyLanguage_a-testStrategy.o `test -f 'testStrategy.cc' || echo '$(srcdir)/'`testStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
#	$(AM_V_CXX)source='testStrategy.cc' object='libstrategyLanguage_a-testStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-testStrategy.o `test -f 'testStrategy.cc' || echo '$(srcdir)/'`testStrategy.cc

libstrategyLanguage_a-testStrategy.obj: testStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-testStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo -c -o libstrategyLanguage_a-testStrategy.obj `if test -f 'testStrategy.cc'; then $(CYGPATH_W) 'testStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/testStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
#	$(AM_V_CXX)source='testStrategy.cc' object='libstrategyLanguage_a-testStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-testStrategy.obj `if test -f 'testStrategy.cc'; then $(CYGPATH_W) 'testStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/testStrategy.cc'; fi`

libstrategyLanguage_a-subtermStrategy.o: subtermStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Tpo -c -o libstrategyLanguage_a-subtermStrategy.o `test -f 'subtermStrategy.cc' || echo '$(srcdir)/'`subtermStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po
#	$(AM_V_CXX)source='subtermStrategy.cc' object='libstrategyLanguage_a-subtermStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermStrategy.o `test -f 'subtermStrategy.cc' || echo '$(srcdir)/'`subtermStrategy.cc

libstrategyLanguage_a-subtermStrategy.obj: subtermStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Tpo -c -o libstrategyLanguage_a-subtermStrategy.obj `if test -f 'subtermStrategy.cc'; then $(CYGPATH_W) 'subtermStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/subtermStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po
#	$(AM_V_CXX)source='subtermStrategy.cc' object='libstrategyLanguage_a-subtermStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermStrategy.obj `if test -f 'subtermStrategy.cc'; then $(CYGPATH_W) 'subtermStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/subtermStrategy.cc'; fi`

libstrategyLanguage_a-callStrategy.o: callStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callStrategy.Tpo -c -o libstrategyLanguage_a-callStrategy.o `test -f 'callStrategy.cc' || echo '$(srcdir)/'`callStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-callStrategy.Po
#	$(AM_V_CXX)source='callStrategy.cc' object='libstrategyLanguage_a-callStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callStrategy.o `test -f 'callStrategy.cc' || echo '$(srcdir)/'`callStrategy.cc

libstrategyLanguage_a-callStrategy.obj: callStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callStrategy.Tpo -c -o libstrategyLanguage_a-callStrategy.obj `if test -f 'callStrategy.cc'; then $(CYGPATH_W) 'callStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/callStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-callStrategy.Po
#	$(AM_V_CXX)source='callStrategy.cc' object='libstrategyLanguage_a-callStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callStrategy.obj `if test -f 'callStrategy.cc'; then $(CYGPATH_W) 'callStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/callStrategy.cc'; fi`

libstrategyLanguage_a-strategicExecution.o: strategicExecution.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicExecution.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo -c -o libstrategyLanguage_a-strategicExecution.o `test -f 'strategicExecution.cc' || echo '$(srcdir)/'`strategicExecution.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
#	$(AM_V_CXX)source='strategicExecution.cc' object='libstrategyLanguage_a-strategicExecution.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicExecution.o `test -f 'strategicExecution.cc' || echo '$(srcdir)/'`strategicExecution.cc

libstrategyLanguage_a-strategicExecution.obj: strategicExecution.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicExecution.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo -c -o libstrategyLanguage_a-strategicExecution.obj `if test -f 'strategicExecution.cc'; then $(CYGPATH_W) 'strategicExecution.cc'; else $(CYGPATH_W) '$(srcdir)/strategicExecution.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
#	$(AM_V_CXX)source='strategicExecution.cc' object='libstrategyLanguage_a-strategicExecution.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicExecution.obj `if test -f 'strategicExecution.cc'; then $(CYGPATH_W) 'strategicExecution.cc'; else $(CYGPATH_W) '$(srcdir)/strategicExecution.cc'; fi`

libstrategyLanguage_a-strategicTask.o: strategicTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo -c -o libstrategyLanguage_a-strategicTask.o `test -f 'strategicTask.cc' || echo '$(srcdir)/'`strategicTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
#	$(AM_V_CXX)source='strategicTask.cc' object='libstrategyLanguage_a-strategicTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicTask.o `test -f 'strategicTask.cc' || echo '$(srcdir)/'`strategicTask.cc

libstrategyLanguage_a-strategicTask.obj: strategicTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo -c -o libstrategyLanguage_a-strategicTask.obj `if test -f 'strategicTask.cc'; then $(CYGPATH_W) 'strategicTask.cc'; else $(CYGPATH_W) '$(srcdir)/strategicTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
#	$(AM_V_CXX)source='strategicTask.cc' object='libstrategyLanguage_a-strategicTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicTask.obj `if test -f 'strategicTask.cc'; then $(CYGPATH_W) 'strategicTask.cc'; else $(CYGPATH_W) '$(srcdir)/strategicTask.cc'; fi`

libstrategyLanguage_a-branchTask.o: branchTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo -c -o libstrategyLanguage_a-branchTask.o `test -f 'branchTask.cc' || echo '$(srcdir)/'`branchTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo $(DEPDIR)/libstrategyLanguage_a-branchTask.Po
#	$(AM_V_CXX)source='branchTask.cc' object='libstrategyLanguage_a-branchTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchTask.o `test -f 'branchTask.cc' || echo '$(srcdir)/'`branchTask.cc

libstrategyLanguage_a-branchTask.obj: branchTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo -c -o libstrategyLanguage_a-branchTask.obj `if test -f 'branchTask.cc'; then $(CYGPATH_W) 'branchTask.cc'; else $(CYGPATH_W) '$(srcdir)/branchTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo $(DEPDIR)/libstrategyLanguage_a-branchTask.Po
#	$(AM_V_CXX)source='branchTask.cc' object='libstrategyLanguage_a-branchTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchTask.obj `if test -f 'branchTask.cc'; then $(CYGPATH_W) 'branchTask.cc'; else $(CYGPATH_W) '$(srcdir)/branchTask.cc'; fi`

libstrategyLanguage_a-strategicProcess.o: strategicProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo -c -o libstrategyLanguage_a-strategicProcess.o `test -f 'strategicProcess.cc' || echo '$(srcdir)/'`strategicProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
#	$(AM_V_CXX)source='strategicProcess.cc' object='libstrategyLanguage_a-strategicProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicProcess.o `test -f 'strategicProcess.cc' || echo '$(srcdir)/'`strategicProcess.cc

libstrategyLanguage_a-strategicProcess.obj: strategicProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo -c -o libstrategyLanguage_a-strategicProcess.obj `if test -f 'strategicProcess.cc'; then $(CYGPATH_W) 'strategicProcess.cc'; else $(CYGPATH_W) '$(srcdir)/strategicProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
#	$(AM_V_CXX)source='strategicProcess.cc' object='libstrategyLanguage_a-strategicProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicProcess.obj `if test -f 'strategicProcess.cc'; then $(CYGPATH_W) 'strategicProcess.cc'; else $(CYGPATH_W) '$(srcdir)/strategicProcess.cc'; fi`

libstrategyLanguage_a-decompositionProcess.o: decompositionProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-decompositionProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo -c -o libstrategyLanguage_a-decompositionProcess.o `test -f 'decompositionProcess.cc' || echo '$(srcdir)/'`decompositionProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
#	$(AM_V_CXX)source='decompositionProcess.cc' object='libstrategyLanguage_a-decompositionProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-decompositionProcess.o `test -f 'decompositionProcess.cc' || echo '$(srcdir)/'`decompositionProcess.cc

libstrategyLanguage_a-decompositionProcess.obj: decompositionProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-decompositionProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo -c -o libstrategyLanguage_a-decompositionProcess.obj `if test -f 'decompositionProcess.cc'; then $(CYGPATH_W) 'decompositionProcess.cc'; else $(CYGPATH_W) '$(srcdir)/decompositionProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
#	$(AM_V_CXX)source='decompositionProcess.cc' object='libstrategyLanguage_a-decompositionProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-decompositionProcess.obj `if test -f 'decompositionProcess.cc'; then $(CYGPATH_W) 'decompositionProcess.cc'; else $(CYGPATH_W) '$(srcdir)/decompositionProcess.cc'; fi`

libstrategyLanguage_a-applicationProcess.o: applicationProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo -c -o libstrategyLanguage_a-applicationProcess.o `test -f 'applicationProcess.cc' || echo '$(srcdir)/'`applicationProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
#	$(AM_V_CXX)source='applicationProcess.cc' object='libstrategyLanguage_a-applicationProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationProcess.o `test -f 'applicationProcess.cc' || echo '$(srcdir)/'`applicationProcess.cc

libstrategyLanguage_a-applicationProcess.obj: applicationProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo -c -o libstrategyLanguage_a-applicationProcess.obj `if test -f 'applicationProcess.cc'; then $(CYGPATH_W) 'applicationProcess.cc'; else $(CYGPATH_W) '$(srcdir)/applicationProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
#	$(AM_V_CXX)source='applicationProcess.cc' object='libstrategyLanguage_a-applicationProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationProcess.obj `if test -f 'applicationProcess.cc'; then $(CYGPATH_W) 'applicationProcess.cc'; else $(CYGPATH_W) '$(srcdir)/applicationProcess.cc'; fi`

libstrategyLanguage_a-strategicSearch.o: strategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicSearch.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo -c -o libstrategyLanguage_a-strategicSearch.o `test -f 'strategicSearch.cc' || echo '$(srcdir)/'`strategicSearch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
#	$(AM_V_CXX)source='strategicSearch.cc' object='libstrategyLanguage_a-strategicSearch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicSearch.o `test -f 'strategicSearch.cc' || echo '$(srcdir)/'`strategicSearch.cc

libstrategyLanguage_a-strategicSearch.obj: strategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicSearch.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo -c -o libstrategyLanguage_a-strategicSearch.obj `if test -f 'strategicSearch.cc'; then $(CYGPATH_W) 'strategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/strategicSearch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
#	$(AM_V_CXX)source='strategicSearch.cc' object='libstrategyLanguage_a-strategicSearch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicSearch.obj `if test -f 'strategicSearch.cc'; then $(CYGPATH_W) 'strategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/strategicSearch.cc'; fi`

libstrategyLanguage_a-depthFirstStrategicSearch.o: depthFirstStrategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-depthFirstStrategicSearch.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Tpo -c -o libstrategyLanguage_a-depthFirstStrategicSearch.o `test -f 'depthFirstStrategicSearch.cc' || echo '$(srcdir)/'`depthFirstStrategicSearch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po
#	$(AM_V_CXX)source='depthFirstStrategicSearch.cc' object='libstrategyLanguage_a-depthFirstStrategicSearch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-depthFirstStrategicSearch.o `test -f 'depthFirstStrategicSearch.cc' || echo '$(srcdir)/'`depthFirstStrategicSearch.cc

libstrategyLanguage_a-depthFirstStrategicSearch.obj: depthFirstStrategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-depthFirstStrategicSearch.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Tpo -c -o libstrategyLanguage_a-depthFirstStrategicSearch.obj `if test -f 'depthFirstStrategicSearch.cc'; then $(CYGPATH_W) 'depthFirstStrategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/depthFirstStrategicSearch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po
#	$(AM_V_CXX)source='depthFirstStrategicSearch.cc' object='libstrategyLanguage_a-depthFirstStrategicSearch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-depthFirstStrategicSearch.obj `if test -f 'depthFirstStrategicSearch.cc'; then $(CYGPATH_W) 'depthFirstStrategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/depthFirstStrategicSearch.cc'; fi`

libstrategyLanguage_a-fairStrategicSearch.o: fairStrategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-fairStrategicSearch.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Tpo -c -o libstrategyLanguage_a-fairStrategicSearch.o `test -f 'fairStrategicSearch.cc' || echo '$(srcdir)/'`fairStrategicSearch.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po
#	$(AM_V_CXX)source='fairStrategicSearch.cc' object='libstrategyLanguage_a-fairStrategicSearch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-fairStrategicSearch.o `test -f 'fairStrategicSearch.cc' || echo '$(srcdir)/'`fairStrategicSearch.cc

libstrategyLanguage_a-fairStrategicSearch.obj: fairStrategicSearch.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-fairStrategicSearch.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Tpo -c -o libstrategyLanguage_a-fairStrategicSearch.obj `if test -f 'fairStrategicSearch.cc'; then $(CYGPATH_W) 'fairStrategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/fairStrategicSearch.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po
#	$(AM_V_CXX)source='fairStrategicSearch.cc' object='libstrategyLanguage_a-fairStrategicSearch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-fairStrategicSearch.obj `if test -f 'fairStrategicSearch.cc'; then $(CYGPATH_W) 'fairStrategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/fairStrategicSearch.cc'; fi`

libstrategyLanguage_a-matchProcess.o: matchProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-matchProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo -c -o libstrategyLanguage_a-matchProcess.o `test -f 'matchProcess.cc' || echo '$(srcdir)/'`matchProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
#	$(AM_V_CXX)source='matchProcess.cc' object='libstrategyLanguage_a-matchProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-matchProcess.o `test -f 'matchProcess.cc' || echo '$(srcdir)/'`matchProcess.cc

libstrategyLanguage_a-matchProcess.obj: matchProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-matchProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo -c -o libstrategyLanguage_a-matchProcess.obj `if test -f 'matchProcess.cc'; then $(CYGPATH_W) 'matchProcess.cc'; else $(CYGPATH_W) '$(srcdir)/matchProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
#	$(AM_V_CXX)source='matchProcess.cc' object='libstrategyLanguage_a-matchProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-matchProcess.obj `if test -f 'matchProcess.cc'; then $(CYGPATH_W) 'matchProcess.cc'; else $(CYGPATH_W) '$(srcdir)/matchProcess.cc'; fi`

libstrategyLanguage_a-subtermProcess.o: subtermProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Tpo -c -o libstrategyLanguage_a-subtermProcess.o `test -f 'subtermProcess.cc' || echo '$(srcdir)/'`subtermProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po
#	$(AM_V_CXX)source='subtermProcess.cc' object='libstrategyLanguage_a-subtermProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermProcess.o `test -f 'subtermProcess.cc' || echo '$(srcdir)/'`subtermProcess.cc

libstrategyLanguage_a-subtermProcess.obj: subtermProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Tpo -c -o libstrategyLanguage_a-subtermProcess.obj `if test -f 'subtermProcess.cc'; then $(CYGPATH_W) 'subtermProcess.cc'; else $(CYGPATH_W) '$(srcdir)/subtermProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po
#	$(AM_V_CXX)source='subtermProcess.cc' object='libstrategyLanguage_a-subtermProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermProcess.obj `if test -f 'subtermProcess.cc'; then $(CYGPATH_W) 'subtermProcess.cc'; else $(CYGPATH_W) '$(srcdir)/subtermProcess.cc'; fi`

libstrategyLanguage_a-rewriteTask.o: rewriteTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-rewriteTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo -c -o libstrategyLanguage_a-rewriteTask.o `test -f 'rewriteTask.cc' || echo '$(srcdir)/'`rewriteTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
#	$(AM_V_CXX)source='rewriteTask.cc' object='libstrategyLanguage_a-rewriteTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-rewriteTask.o `test -f 'rewriteTask.cc' || echo '$(srcdir)/'`rewriteTask.cc

libstrategyLanguage_a-rewriteTask.obj: rewriteTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-rewriteTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo -c -o libstrategyLanguage_a-rewriteTask.obj `if test -f 'rewriteTask.cc'; then $(CYGPATH_W) 'rewriteTask.cc'; else $(CYGPATH_W) '$(srcdir)/rewriteTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
#	$(AM_V_CXX)source='rewriteTask.cc' object='libstrategyLanguage_a-rewriteTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-rewriteTask.obj `if test -f 'rewriteTask.cc'; then $(CYGPATH_W) 'rewriteTask.cc'; else $(CYGPATH_W) '$(srcdir)/rewriteTask.cc'; fi`

libstrategyLanguage_a-subtermTask.o: subtermTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermTask.Tpo -c -o libstrategyLanguage_a-subtermTask.o `test -f 'subtermTask.cc' || echo '$(srcdir)/'`subtermTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermTask.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermTask.Po
#	$(AM_V_CXX)source='subtermTask.cc' object='libstrategyLanguage_a-subtermTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermTask.o `test -f 'subtermTask.cc' || echo '$(srcdir)/'`subtermTask.cc

libstrategyLanguage_a-subtermTask.obj: subtermTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-subtermTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-subtermTask.Tpo -c -o libstrategyLanguage_a-subtermTask.obj `if test -f 'subtermTask.cc'; then $(CYGPATH_W) 'subtermTask.cc'; else $(CYGPATH_W) '$(srcdir)/subtermTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-subtermTask.Tpo $(DEPDIR)/libstrategyLanguage_a-subtermTask.Po
#	$(AM_V_CXX)source='subtermTask.cc' object='libstrategyLanguage_a-subtermTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-subtermTask.obj `if test -f 'subtermTask.cc'; then $(CYGPATH_W) 'subtermTask.cc'; else $(CYGPATH_W) '$(srcdir)/subtermTask.cc'; fi`

libstrategyLanguage_a-callTask.o: callTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callTask.Tpo -c -o libstrategyLanguage_a-callTask.o `test -f 'callTask.cc' || echo '$(srcdir)/'`callTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callTask.Tpo $(DEPDIR)/libstrategyLanguage_a-callTask.Po
#	$(AM_V_CXX)source='callTask.cc' object='libstrategyLanguage_a-callTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callTask.o `test -f 'callTask.cc' || echo '$(srcdir)/'`callTask.cc

libstrategyLanguage_a-callTask.obj: callTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callTask.Tpo -c -o libstrategyLanguage_a-callTask.obj `if test -f 'callTask.cc'; then $(CYGPATH_W) 'callTask.cc'; else $(CYGPATH_W) '$(srcdir)/callTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callTask.Tpo $(DEPDIR)/libstrategyLanguage_a-callTask.Po
#	$(AM_V_CXX)source='callTask.cc' object='libstrategyLanguage_a-callTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callTask.obj `if test -f 'callTask.cc'; then $(CYGPATH_W) 'callTask.cc'; else $(CYGPATH_W) '$(srcdir)/callTask.cc'; fi`

libstrategyLanguage_a-callProcess.o: callProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callProcess.Tpo -c -o libstrategyLanguage_a-callProcess.o `test -f 'callProcess.cc' || echo '$(srcdir)/'`callProcess.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-callProcess.Po
#	$(AM_V_CXX)source='callProcess.cc' object='libstrategyLanguage_a-callProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callProcess.o `test -f 'callProcess.cc' || echo '$(srcdir)/'`callProcess.cc

libstrategyLanguage_a-callProcess.obj: callProcess.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-callProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-callProcess.Tpo -c -o libstrategyLanguage_a-callProcess.obj `if test -f 'callProcess.cc'; then $(CYGPATH_W) 'callProcess.cc'; else $(CYGPATH_W) '$(srcdir)/callProcess.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-callProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-callProcess.Po
#	$(AM_V_CXX)source='callProcess.cc' object='libstrategyLanguage_a-callProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-callProcess.obj `if test -f 'callProcess.cc'; then $(CYGPATH_W) 'callProcess.cc'; else $(CYGPATH_W) '$(srcdir)/callProcess.cc'; fi`

libstrategyLanguage_a-strategyStackManager.o: strategyStackManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyStackManager.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo -c -o libstrategyLanguage_a-strategyStackManager.o `test -f 'strategyStackManager.cc' || echo '$(srcdir)/'`strategyStackManager.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
#	$(AM_V_CXX)source='strategyStackManager.cc' object='libstrategyLanguage_a-strategyStackManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyStackManager.o `test -f 'strategyStackManager.cc' || echo '$(srcdir)/'`strategyStackManager.cc

libstrategyLanguage_a-strategyStackManager.obj: strategyStackManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyStackManager.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo -c -o libstrategyLanguage_a-strategyStackManager.obj `if test -f 'strategyStackManager.cc'; then $(CYGPATH_W) 'strategyStackManager.cc'; else $(CYGPATH_W) '$(srcdir)/strategyStackManager.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
#	$(AM_V_CXX)source='strategyStackManager.cc' object='libstrategyLanguage_a-strategyStackManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyStackManager.obj `if test -f 'strategyStackManager.cc'; then $(CYGPATH_W) 'strategyStackManager.cc'; else $(CYGPATH_W) '$(srcdir)/strategyStackManager.cc'; fi`

libstrategyLanguage_a-variableBindingsManager.o: variableBindingsManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-variableBindingsManager.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Tpo -c -o libstrategyLanguage_a-variableBindingsManager.o `test -f 'variableBindingsManager.cc' || echo '$(srcdir)/'`variableBindingsManager.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Tpo $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po
#	$(AM_V_CXX)source='variableBindingsManager.cc' object='libstrategyLanguage_a-variableBindingsManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-variableBindingsManager.o `test -f 'variableBindingsManager.cc' || echo '$(srcdir)/'`variableBindingsManager.cc

libstrategyLanguage_a-variableBindingsManager.obj: variableBindingsManager.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-variableBindingsManager.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Tpo -c -o libstrategyLanguage_a-variableBindingsManager.obj `if test -f 'variableBindingsManager.cc'; then $(CYGPATH_W) 'variableBindingsManager.cc'; else $(CYGPATH_W) '$(srcdir)/variableBindingsManager.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Tpo $(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po
#	$(AM_V_CXX)source='variableBindingsManager.cc' object='libstrategyLanguage_a-variableBindingsManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-variableBindingsManager.obj `if test -f 'variableBindingsManager.cc'; then $(CYGPATH_W) 'variableBindingsManager.cc'; else $(CYGPATH_W) '$(srcdir)/variableBindingsManager.cc'; fi`

libstrategyLanguage_a-oneStrategy.o: oneStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-oneStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Tpo -c -o libstrategyLanguage_a-oneStrategy.o `test -f 'oneStrategy.cc' || echo '$(srcdir)/'`oneStrategy.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po
#	$(AM_V_CXX)source='oneStrategy.cc' object='libstrategyLanguage_a-oneStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-oneStrategy.o `test -f 'oneStrategy.cc' || echo '$(srcdir)/'`oneStrategy.cc

libstrategyLanguage_a-oneStrategy.obj: oneStrategy.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-oneStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Tpo -c -o libstrategyLanguage_a-oneStrategy.obj `if test -f 'oneStrategy.cc'; then $(CYGPATH_W) 'oneStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/oneStrategy.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po
#	$(AM_V_CXX)source='oneStrategy.cc' object='libstrategyLanguage_a-oneStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-oneStrategy.obj `if test -f 'oneStrategy.cc'; then $(CYGPATH_W) 'oneStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/oneStrategy.cc'; fi`

libstrategyLanguage_a-oneTask.o: oneTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-oneTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-oneTask.Tpo -c -o libstrategyLanguage_a-oneTask.o `test -f 'oneTask.cc' || echo '$(srcdir)/'`oneTask.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-oneTask.Tpo $(DEPDIR)/libstrategyLanguage_a-oneTask.Po
#	$(AM_V_CXX)source='oneTask.cc' object='libstrategyLanguage_a-oneTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-oneTask.o `test -f 'oneTask.cc' || echo '$(srcdir)/'`oneTask.cc

libstrategyLanguage_a-oneTask.obj: oneTask.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-oneTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-oneTask.Tpo -c -o libstrategyLanguage_a-oneTask.obj `if test -f 'oneTask.cc'; then $(CYGPATH_W) 'oneTask.cc'; else $(CYGPATH_W) '$(srcdir)/oneTask.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libstrategyLanguage_a-oneTask.Tpo $(DEPDIR)/libstrategyLanguage_a-oneTask.Po
#	$(AM_V_CXX)source='oneTask.cc' object='libstrategyLanguage_a-oneTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-oneTask.obj `if test -f 'oneTask.cc'; then $(CYGPATH_W) 'oneTask.cc'; else $(CYGPATH_W) '$(srcdir)/oneTask.cc'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-branchTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-oneTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-branchTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-callTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-depthFirstStrategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-fairStrategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-oneStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-oneTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategyExpression.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermProcess.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-subtermTask.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
	-rm -f ./$(DEPDIR)/libstrategyLanguage_a-variableBindingsManager.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-am clean \
	clean-generic clean-noinstLIBRARIES cscopelist-am ctags \
	ctags-am distclean distclean-compile distclean-generic \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
