
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 247
#define YY_END_OF_BUFFER 248
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1486] =
    {   0,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,    0,    0,    0,    0,  235,  235,
        0,    0,  248,  246,  244,  245,  245,  132,  246,  130,
      132,  130,  132,  130,  131,  131,  132,  246,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   18,  132,  132,  132,  132,  132,  132,
      132,  245,  202,  246,  200,  200,  200,  202,  200,  200,
      202,  246,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      141,  246,  135,  141,  141,  139,  138,  135,  141,  246,

      141,  141,  141,  135,  143,  143,  142,  143,  143,  143,
      143,  218,  246,  213,  214,  218,  204,  218,  216,  203,
      207,  205,  206,  218,  246,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  215,  223,
      223,  223,  223,  223,  221,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  244,
      220,  246,  245,  229,  230,  231,  224,  228,  233,  232,
      234,  235,  236,  243,  237,  242,  242,  238,  239,  237,
      240,  241,  244,  133,  132,    0,  132,    0,    0,    0,
      132,  132,  131,    0,  132,  132,  132,  132,  132,  132,

      132,  132,   13,  132,  132,  132,  132,  132,  132,   51,
      132,  132,  132,   88,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   74,  132,  132,  132,    6,  132,  132,
      132,   17,  132,   16,  132,   87,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   44,    9,   85,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   89,  132,
       91,  132,  132,  132,  132,  132,  132,  132,  132,  132,
        7,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  202,    0,  201,  202,    0,    0,    0,
      202,  202,  195,  198,  199,  196,    0,  202,  202,  202,

      202,  202,  202,  188,  202,  202,  202,  202,  202,  187,
      176,  202,  202,  202,  176,  202,  202,  175,  202,  174,
      202,  202,  202,  202,  185,  202,  202,  202,  181,  202,
      202,  176,  202,  189,  191,  202,  202,  202,  202,  202,
      144,  176,  202,  197,  141,    0,  140,  141,    0,    0,
        0,  141,  141,    0,  134,  138,    0,  141,  141,    6,
      244,  142,    0,    0,    0,    0,    0,  218,    0,  217,
      218,    0,    0,    0,  218,  218,  209,  208,    0,  218,
      218,  218,  218,  218,  218,  218,  218,  211,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      210,  223,    0,  222,  223,    0,    0,    0,  223,  223,
        0,  223,  223,  223,  219,  223,  223,  223,  219,  223,
      223,  223,  223,  219,  219,  223,  223,  223,  219,  223,
      244,  220,    0,    0,    0,  229,  225,  226,  227,  233,
      235,  237,  237,    0,    0,    0,    0,  132,    0,    2,
        2,  132,  132,  132,   80,  132,  132,  132,  132,  132,
      132,  132,   79,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   19,   88,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   35,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   87,  132,  132,

        7,  132,   33,  132,  132,  132,   45,  132,   46,   85,
      132,  132,  132,  132,  132,  132,   12,  132,  116,   22,
      132,  132,   25,   89,  132,   91,  132,  132,   42,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   86,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  202,    0,    2,    2,  202,  202,
      202,  186,  202,  202,  190,  192,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  150,  202,  176,  202,  193,
      202,  202,  202,  202,  202,  202,  167,  166,  202,  182,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  184,  141,    0,    2,    2,    0,    0,  141,
      141,    0,    0,    2,    2,  218,    0,    2,    2,  218,
      218,  218,  218,  218,  218,  218,  218,  212,  218,  218,
      218,  218,  218,  218,  218,  212,  218,  218,  218,  218,
      218,  218,  223,    0,    2,    2,  223,  223,  223,  223,
      219,  219,  223,  223,  223,  223,  223,  219,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    2,    2,    1,
        2,    2,  132,  132,  132,   64,   54,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   61,  132,   32,
      132,   23,  132,  132,  132,  132,  108,   26,  132,  132,

      132,   69,  121,  132,   27,  132,  132,  132,  132,  125,
      132,  132,  132,  132,  132,   10,   31,  132,    3,  132,
      132,  128,  132,  132,   21,  132,   47,  132,  132,  111,
       15,  132,  132,  132,  132,  132,   18,  132,  132,  132,
      132,  132,  132,   89,  132,  132,   43,  132,  132,   84,
       24,   28,  132,  106,  132,  132,  132,  117,   76,  132,
      132,  132,  132,   86,  132,  132,    8,  132,  132,  132,
       70,  132,  132,    0,    0,    2,    2,    2,    1,    2,
        2,  202,  147,  202,  149,  202,  202,  163,  202,  202,
      193,  202,  202,  194,  202,  202,  145,  202,  202,  202,

      202,  151,  202,  202,  152,  202,  202,  153,    3,  202,
      202,  183,  202,  202,  202,  162,  202,  155,  202,  202,
      177,  202,  202,  202,  202,  202,  202,  184,    0,    0,
        2,    2,    2,    1,    2,    2,    0,    0,  141,  141,
        1,    0,    0,    2,    2,    2,    1,    2,    2,  218,
      212,  218,  218,  218,  218,  218,  218,  212,  218,  212,
      218,  218,  218,  218,  218,  212,  212,  218,  218,  218,
        0,    0,    2,    2,    2,    1,    2,    2,  223,  223,
      219,  219,  223,  223,  223,  223,  223,  223,  219,  223,
      223,  223,  223,    0,    0,    0,    0,    2,    2,    1,

        1,    1,    1,    1,    2,    2,    2,  105,  132,   72,
      132,  109,  132,   53,   30,   52,   66,  132,  132,  132,
      132,  132,  132,   73,  132,   95,  132,  101,  132,  132,
       29,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,   67,  125,  132,  102,   93,  113,    5,   38,  132,
      132,  132,  132,  132,  132,   71,   20,   63,  132,  132,
      132,   14,  132,  132,  132,  132,  132,  132,  132,  132,
       11,  132,   84,  132,  132,  112,   77,   90,   62,  132,
      132,   48,   41,  132,  132,  122,   83,  132,  107,   56,
      132,  132,    2,    2,    1,    1,    1,    1,    1,    2,

        2,    2,  148,  179,  202,  202,  202,  169,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  146,    5,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  154,  177,  202,  158,  202,  202,  202,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  137,
      141,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,  212,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  212,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  223,
      223,  223,  223,  223,  223,  223,  219,  223,  223,  237,

        0,    0,    0,    0,    1,    1,    1,    1,    1,    2,
        2,   49,  132,  132,  132,  132,  132,   53,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   98,  132,  132,    4,  132,  132,  132,  132,
      132,  132,  113,   68,   82,   33,  132,  132,  115,   71,
      132,  132,  132,  132,  132,   22,  132,  104,   60,  132,
       40,   57,  132,  132,  132,  112,   90,  132,  132,   78,
      132,  132,  132,  132,   39,    1,    1,    1,    1,    1,
        2,    2,  202,  202,  165,  202,  202,    4,  161,  156,
      202,  202,  202,  202,  202,  202,  202,  202,  166,  202,

      173,  202,  168,  202,  202,  202,  202,  160,  202,  202,
      202,    1,    1,    1,    1,    1,    2,    2,  136,    1,
        1,    1,    1,    1,    2,    2,  218,  218,  212,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,    1,
        1,    1,    1,    1,    2,    2,  223,  223,  223,  223,
      223,  223,    1,    1,  132,   72,  132,  132,   55,  126,
       94,  132,   59,  132,  132,  132,   23,  132,  132,  132,
      132,  100,  132,  132,  132,  132,  132,  129,  132,   99,
      132,   81,   65,  132,  132,  132,  114,   96,  132,  132,
       25,  132,   24,  132,  132,   92,   37,   50,  132,  132,

        1,    1,  202,  202,  202,  202,  202,  202,  170,  202,
      202,  202,  202,  167,  202,  171,  202,  202,  202,  164,
      202,  202,  178,  202,    1,    1,    1,    1,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,    1,
        1,  223,  223,  223,  223,  223,  219,  132,  132,  132,
       94,  132,  132,   73,   32,   58,  132,  132,   26,  103,
      132,   27,  127,  132,  132,  132,  132,  132,  132,  116,
      132,  132,   28,  132,   36,  132,  132,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  152,  157,  202,  202,
      202,  159,  180,  178,  202,  218,  218,  218,  218,  218,

      218,  218,  218,  223,  223,  223,  223,  219,  132,   64,
      110,  132,   61,   73,  123,   29,   69,  132,  132,  132,
       21,  132,  124,   75,  132,  132,  119,   34,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  172,  218,
      218,  218,  218,  218,  218,  218,  223,  223,  223,  120,
      132,  132,  132,  118,  132,  202,  202,  202,  202,  202,
      151,  202,  155,  180,  218,  218,  218,  218,  218,  223,
       97,  102,  132,  148,  149,  202,  202,  162,  218,  223,
       62,  202,  218,  165,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,   13,    8,   22,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       23,   24,   25,    8,   26,   27,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   13,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57
    } ;

static const YY_CHAR yy_meta[58] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    5,    8,    9,    8,   10,   10,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    5,   11
    } ;

static const flex_int16_t yy_base[1580] =
    {   0,
        0,    0,   57,    0,  114,    0,  170,  184,  199,    0,
      256,    0,  312,    0,  319,  327,  360,  365,  175,  189,
      374,  431,  835, 9703,  177,  829, 9703,  311,  326, 9703,
      364, 9703,  373,  314,  377,  384,  380,  398,  417,  424,
      480,  436,  448,  517,  468,  388,  501,  478,  508,  542,
      549,  589,  578,  470,  585,  609,  626,  514,  637,  503,
      556, 9703,  576,  363, 9703,  663,  650,  665,  678,  686,
      684,  704,  690,  751,  712,  724,  737,  715,  790,  745,
      760,  793,  785,  817,  825,  807,  847,  849,  871,  851,
      874,  372, 9703,  876,  895,  921,  923,  926,  929,  906,

      942,  950,  954, 9703, 9703,  985, 9703,  999, 1013,  817,
      812,  956,  396, 9703, 9703, 1014, 9703, 1018, 1020, 1022,
     1034, 9703, 9703, 1042,  999, 1047, 1050, 1055, 1063, 1085,
     1069, 1094, 1098, 1119, 1123, 1125, 1131, 1146, 9703, 9703,
     1150,  415, 1155, 1170, 1174, 1178, 1188, 1235, 1194, 1198,
     1206, 1210, 1237, 1243, 1262, 1275, 1278, 1284, 1290, 1329,
     9703, 1343, 1357,    0, 9703, 9703, 9703,  452,    0, 9703,
     9703,    0, 9703, 9703,    0, 9703, 9703, 9703, 9703, 1346,
     9703, 9703,  191, 9703,  522,  449,  612, 1328,  456,  392,
      882,  958, 1231, 1356,  641,  887, 1246, 1182,  616, 1110,

      699, 1362, 1061, 1367, 1371, 1378, 1381, 1386, 1166, 1286,
     1397, 1405, 1407, 1410, 1417, 1421, 1426, 1432, 1437, 1445,
     1460, 1448, 1467, 1469, 1471, 1473, 1479, 1498, 1482, 1504,
     1507, 1511, 1513, 1517, 1520, 1523, 1526, 1533, 1547, 1549,
     1553, 1555, 1559, 1561, 1563, 1582, 1586, 1588, 1592, 1595,
     1601, 1607, 1616, 1614, 1628, 1630, 1635, 1638, 1644, 1654,
     1659, 1668, 1674, 1682, 1693, 1701, 1704, 1716, 1712, 1723,
     1728, 1736, 1738, 1744, 1747, 1751, 1758, 1763, 1772, 1777,
     1779, 1798, 1784, 1805,  492, 1807, 1811, 1830,  500,  414,
     1833, 1820, 1841, 1845, 1847, 1849, 1867, 1853, 1877, 1879,

     1882, 1885, 1891, 1910, 1918, 1924, 1926, 1932, 1938, 1940,
     1954, 1962, 1966, 1968, 1987, 1990, 2003, 2011, 2016, 2024,
     2032, 2036, 2040, 2044, 2056, 2048, 2059, 2064, 2083, 2088,
     2096, 2110, 2091, 2112, 2118, 2124, 2138, 2140, 2146, 2152,
     2165, 2167, 2173, 2179, 2193,  528, 2195, 2198, 2217,  536,
      416, 2220, 2228, 2246, 9703, 2247, 2256, 2259, 2267, 2207,
     2285, 9703, 2310,  812,  803,  793,  788, 2292,  564, 2311,
     2314, 2322,  571,  468, 2330, 2334, 2339, 2342, 2360, 2363,
     2366, 2371, 2375, 2394, 2402, 2407, 2416, 2410, 2429, 2431,
     2437, 2450, 2453, 2456, 2458, 2472, 2486, 2494, 2498, 2500,

     2506, 2520,  577, 2522, 2525, 2544,  584,  500, 2547, 2555,
     2565, 2534, 2568, 2576, 2584, 2588, 2597, 2609, 2617, 2621,
     2623, 2625, 2629, 2645, 2650, 2659, 2671, 2673, 2679, 2685,
     2716, 9703, 2730,  772,  765,    0, 9703, 9703, 9703,    0,
        0,    0, 9703,  737,  726,  720,  713, 1934,  590, 2745,
     2800, 1964, 2269, 2326, 1978, 2681, 2687, 2734, 2369, 2582,
     2748, 2754, 2738, 2760, 2779, 2786, 2809, 2758, 2767, 2811,
     2764, 2815, 2819, 2821, 2825, 2830, 2835, 2844, 2851, 2854,
     2856, 2863, 2867, 2870, 2886, 2883, 2879, 2893, 2895, 2898,
     2914, 2917, 2923, 2925, 2933, 2936, 2944, 2949, 2956, 2958,

     2960, 2963, 2968, 2979, 2988, 2990, 2995, 2998, 3000, 3011,
     3014, 3021, 3023, 3025, 3035, 3044, 3046, 3048, 3050, 3054,
     3058, 3078, 3081, 3085, 3087, 3089, 3094, 3108, 3115, 3118,
     3120, 3123, 3143, 3129, 3134, 3148, 3153, 3155, 3162, 3164,
     3176, 3183, 3190, 3185, 3198, 3204, 3212, 3219, 3223, 3226,
     3228, 3231, 3233, 3252, 3254,  610, 3299, 3354, 3256, 3259,
     3268, 3280, 3302, 3286, 3314, 3322, 3357, 3335, 3345, 3379,
     3387, 3391, 3403, 3407, 3416, 3330, 3419, 3431, 3439, 3445,
     3447, 3459, 3467, 3471, 3473, 3479, 3494, 3499, 3502, 3507,
     3523, 3526, 3529, 3532, 3545, 3554, 3557, 3570, 3579, 3582,

     3594, 3606, 3609, 3614,  636, 3655, 3710,  720,  705, 3622,
     3636,  697,  686,  675,  661, 3658,  679, 3765, 3820, 3661,
     3689, 3714, 3663, 3691, 3716, 3686, 3718, 3741, 3768, 3771,
     3746, 3780, 3784, 3796, 3823, 3828, 3843, 3852, 3855, 3864,
     3867, 3879, 3887,  710, 3914, 3969, 3900, 4016, 3922, 3934,
     3936, 3955, 3982, 3984, 3988, 4011, 4019, 4024,  643,  612,
      573,  566,  556,  545,  721,  530,    0,  551,  806, 4070,
      318, 4125, 3363, 3395, 3548, 3590, 3264, 3666, 3839, 3831,
     3776, 3542, 4021, 3893, 3979, 4046, 4027, 3950, 4059, 4074,
     4081, 4085, 3634, 4078, 4089, 4093, 4104, 4118, 4128, 4131,

     4133, 4140, 4144, 4147, 4155, 4159, 4168, 4175, 4181, 4184,
     4187, 4195, 4206, 4210, 4214, 4216, 4218, 4220, 4230, 4241,
     4244, 4249, 4252, 4254, 4260, 4265, 4273, 4275, 4280, 4284,
     4287, 4294, 4296, 4299, 4306, 4318, 4310, 4320, 4325, 4330,
     4333, 4339, 4344, 4349, 4355, 4360, 4365, 4370, 4379, 4384,
     4389, 4391, 4394, 4405, 4415, 4418, 4420, 4424, 4426, 4429,
     4434, 4445, 4448, 4454, 4458, 4460, 4468, 4479, 4483, 4490,
     4492, 4499, 4494,  746,  607,  542, 4527,  500, 4551,  326,
     4606, 4514, 4523, 4537, 4563, 4559, 4571, 4575, 4610, 4587,
     4619, 4631, 4646, 4658, 4660, 4666, 4679, 4681, 4693, 4695,

     4701, 4707, 4715, 4720, 4728, 4743, 4748, 4751, 4757, 4763,
     4771, 4777, 4779, 4785, 4791, 4799, 4804, 4819, 4827, 4831,
     4839, 4847, 4853, 4855, 4807, 4861, 4875, 4877,  757,  720,
      470, 4888,  462, 4912,  433, 4967,  469,  452, 4898, 4920,
        0,  776,  754,  428, 4955,  426, 5022,  540, 5077, 4918,
     4956, 4971, 4987, 4975, 5002, 5026, 5028, 5030, 5058, 5066,
     5063, 5090, 4979, 5099, 5111, 5114, 5119, 5133, 5139, 5147,
      780,  843,  417, 5160,  406, 5194,  657, 5249, 5161, 2459,
     5163, 2632,  824, 5197, 5200, 5202, 5229, 5235, 5255, 5264,
     5269, 5283, 5289, 5273, 5303,  378,  387, 5233, 1320,    0,

     5358, 5329,  386, 5413, 5340,  371, 5369, 4573, 4612, 4616,
     4815, 4841, 4906, 5243, 4934, 5042, 5071, 5159, 5293, 5313,
     5320, 5317, 5086, 5370, 5365, 5188, 5373, 5378, 5393, 5381,
     5402, 5406, 5417, 5425, 5428, 5432, 5436, 5444, 5448, 5451,
     5460, 5463, 5467, 5472, 5482, 5486, 5488, 5491, 5493, 5495,
     5497, 5501, 5516, 5522, 5526, 5528, 5532, 5536, 5538, 5541,
     5551, 5560, 5563, 5567, 5570, 5574, 5582, 5576, 5598, 5601,
     5586, 5605, 5608, 5613, 5620, 5627, 5632, 5635, 5640, 5642,
     5648, 5651, 5662, 5670, 5674, 5676, 5681, 5683, 5686, 5689,
     5695, 5697, 5729, 1671, 5753, 5741,    0,  337, 5808, 5745,

     5863, 5780, 5725, 5776, 5779, 5811, 5814, 5816, 5820, 5849,
     5869, 5871, 5844, 5883, 5885, 5899, 5905, 5907, 5919, 5913,
     5927, 5932, 5941, 5953, 5955, 5968, 5976, 5980, 5982, 5984,
     6003, 6005, 6017, 6029, 6031, 6037, 6045, 6051, 6059, 5789,
     2156, 6096, 6080, 6151,  332, 6206, 6088, 6261, 6123, 6119,
     6154, 6132, 5770, 6316, 6184, 6371,  329, 6426, 6143, 6481,
     6217, 6122, 6187, 6219, 6185, 6231, 6163, 6228, 6240, 6265,
     6267, 6295, 6280, 6286, 6319, 6322, 6328, 6341, 6347, 6382,
     5847, 6536, 6398, 6591,  304, 6646, 6406, 6701, 6441, 6412,
     6448, 6461, 6392, 6484, 6489, 6446, 6505, 6539, 6544, 9703,

     6519, 1456, 1747,  280, 6574, 6113, 6574, 6756, 6602, 6618,
     6296, 5720, 5911, 5990, 6053, 6351, 6383, 5788, 6216, 5830,
     6492, 6517, 6432, 6082, 6612, 6242, 6604, 6614, 6606, 6325,
     6386, 6649, 6039, 6652, 6639, 6530, 6659, 6661, 6668, 6682,
     6705, 6707, 6560, 6709, 6713, 6716, 6736, 6749, 6745, 6760,
     6764, 6768, 6771, 6775, 6779, 6791, 6799, 6804, 6806, 6810,
     6812, 6814, 6818, 6825, 6834, 6838, 6840, 6844, 6846, 6849,
     6853, 6860, 6868, 6875, 6879, 6907, 6920, 6915, 6970, 6932,
     6941, 6950, 6950, 6973, 6946, 6982, 6976, 6995, 7001, 7007,
     7010, 7022, 7026, 7035, 7038, 7054, 7062, 7050, 7074, 7076,

     7082, 7090, 7095, 7104, 7116, 7118, 7124, 7138, 7140, 7143,
     7146, 7173, 7191, 7189,    0, 7200, 7204, 7214, 7152, 7218,
     7228, 7223,    0, 7248, 7252, 7261, 7257, 7265, 7270, 7273,
     7278, 7286, 7300, 7308, 7320, 7328, 7332, 7336, 7334, 7370,
     7379, 7374,    0, 7389, 7399, 7408, 7398, 7410, 7422, 7424,
     7426, 7438, 7459, 7472, 7460, 6937, 7281, 6979, 7041, 7214,
     7468, 7418, 7330, 7378, 7471, 7473, 7475, 7480, 7482, 7484,
     7494, 7506, 7508, 7510, 7514, 7521, 7529, 7534, 7536, 7543,
     7545, 7555, 7558, 7564, 7566, 7568, 7570, 7577, 7579, 7593,
     7600, 7602, 7604, 7606, 7613, 7615, 7625, 7627, 7636, 7639,

     7666, 7681, 7660, 7682, 7685, 7687, 7706, 7709, 7711, 7730,
     7733, 7739, 7742, 7745, 7761, 7765, 7767, 7770, 7786, 7789,
     7791, 7805, 7810, 7818, 7845, 7860, 7864, 7873, 7832, 7869,
     7873, 7875, 7877, 7881, 7897, 7903, 7911, 7916, 7925, 7946,
     7957, 7940, 7953, 7956, 7962, 7975, 7977, 7797, 7913, 7981,
     7697, 7717, 7983, 7985, 7987, 7990, 8006, 8009, 8016, 8018,
     8020, 8029, 8031, 8039, 8044, 8041, 8051, 8053, 8063, 8065,
     8075, 8077, 8079, 8084, 8086, 8088, 8091, 8100, 8113, 8116,
     8119, 8121, 8141, 8143, 8155, 8149, 8164, 8169, 8177, 8183,
     8189, 8191, 8205, 8213, 8217, 8225, 8233, 8219, 8241, 8249,

     8247, 8268, 8255, 8270, 8282, 8284, 8290, 8296, 8293, 8193,
     8197, 8298, 8227, 8306, 8320, 8325, 8327, 8329, 8331, 8336,
     8339, 8341, 8355, 8360, 8362, 8365, 8367, 8369, 8389, 8391,
     8394, 8397, 8410, 8418, 8426, 8434, 8442, 8447, 8455, 8461,
     8463, 8469, 8475, 8488, 8497, 8502, 8510, 8522, 8531, 8402,
     8405, 8494, 8421, 8518, 8533, 8537, 8546, 8558, 8570, 8572,
     8584, 8586, 8598, 8610, 8612, 8614, 8626, 8634, 8638, 8640,
     8556, 8578, 8646, 8654, 8662, 8666, 8668, 8674, 8687, 8689,
     8582, 8695, 8701, 8717, 9703, 8744, 8755, 8766, 8777, 8788,
     8795, 8805, 8812, 8822, 8829, 8839, 8846, 8856, 8863, 8873,

     8884, 8895, 8906, 8916, 8922, 8929, 8936, 8943, 8950, 8960,
     8971, 8981, 8992, 9002, 9013, 9024, 9034, 9045, 9055, 9066,
     9077, 9088, 9099, 9110, 9121, 9132, 9143, 9154, 9165, 9176,
     9187, 9198, 9209, 9220, 9231, 9242, 9253, 9264, 9275, 9286,
     9297, 9308, 9319, 9326, 9337, 9348, 9359, 9370, 9381, 9392,
     9399, 9410, 9421, 9432, 9443, 9454, 9465, 9472, 9483, 9494,
     9505, 9516, 9527, 9538, 9545, 9556, 9567, 9578, 9589, 9600,
     9607, 9618, 9629, 9640, 9651, 9658, 9669, 9680, 9691
    } ;

static const flex_int16_t yy_def[1580] =
    {   0,
     1485,    1, 1485,    3, 1485,    5, 1486, 1486, 1485,    9,
     1485,   11,   11,   13, 1487, 1487, 1488, 1488, 1489, 1489,
     1490, 1490, 1485, 1485, 1485, 1485, 1485, 1491, 1492, 1485,
     1491, 1485, 1491, 1491, 1491, 1491, 1491, 1485, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491,   41, 1491, 1491, 1491, 1491,
     1491, 1485, 1493, 1494, 1485, 1493, 1493, 1493, 1493, 1493,
     1493, 1485, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493,   79, 1493, 1493, 1493, 1493,
     1495, 1496, 1485, 1495, 1495, 1495, 1495, 1495, 1495, 1485,

     1495, 1495, 1495, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1497, 1498, 1485, 1485, 1497, 1485, 1497, 1497, 1497,
     1497, 1485, 1485, 1497, 1485, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1485, 1485,
     1499, 1500, 1499, 1499, 1499, 1499, 1485, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1485,
     1485, 1485, 1485, 1501, 1485, 1485, 1485, 1485, 1502, 1485,
     1485, 1503, 1485, 1485, 1504, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1491, 1492, 1491, 1505, 1492, 1492,
     1491, 1491, 1491, 1485, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1493, 1494, 1493, 1493, 1506, 1494, 1494,
     1493, 1493, 1493, 1493, 1493, 1493, 1485, 1493, 1493, 1493,

     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493,   79, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1495, 1496, 1495, 1495, 1507, 1496,
     1496, 1495, 1495, 1485, 1485, 1495, 1485, 1495, 1495, 1495,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1497, 1498, 1497,
     1497, 1508, 1498, 1498, 1497, 1497, 1497, 1497, 1485, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,

     1497, 1499, 1500, 1499, 1499, 1509, 1500, 1500, 1499, 1499,
     1485, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1485, 1485, 1485, 1485, 1485, 1501, 1485, 1485, 1485, 1502,
     1503, 1504, 1485, 1485, 1485, 1485, 1485, 1491, 1510, 1511,
     1511, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1493, 1512, 1513, 1513, 1493, 1493,
     1493, 1493, 1493,   79, 1493, 1493, 1493, 1493,   79, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1493, 1495, 1514, 1515, 1515, 1485, 1485, 1495,
     1495, 1485, 1485, 1516, 1516, 1497, 1517, 1518, 1518, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1499, 1519, 1520, 1520, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1485, 1485,
     1485, 1485, 1485, 1485, 1510, 1510, 1516,  451, 1521, 1522,
      451, 1523, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1512, 1512,  558, 1524,  558, 1525,  558,
     1526, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1514, 1514,
      607, 1527,  607, 1528,  607, 1529, 1485, 1485, 1495, 1495,
     1530, 1517, 1517,  619, 1531,  619, 1532,  619, 1533, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1519, 1519,  646, 1534,  646, 1535,  646, 1536, 1499,  648,
     1499,  648,  648, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1485, 1485, 1485, 1485, 1521, 1521, 1530,

     1522, 1537,  901, 1538, 1516,  451, 1539, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1524, 1524, 1525, 1540,  995,  995, 1541, 1516,

     1542, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545,
     1545, 1546, 1547, 1546, 1044, 1548, 1516, 1549, 1550, 1551,
     1551, 1552, 1552, 1553, 1554, 1553, 1056, 1555, 1516, 1556,
     1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559,
     1559, 1560, 1561, 1560, 1084, 1562, 1516, 1563, 1564, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1485,

     1485, 1485, 1485, 1485, 1566, 1566, 1567, 1568, 1569, 1570,
     1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1572, 1572, 1567, 1573, 1574,
     1575, 1575, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1547, 1547, 1567, 1044, 1577, 1550, 1550, 1551, 1554,
     1554, 1567, 1056, 1578, 1557, 1557, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1561,
     1561, 1567, 1084, 1579, 1564, 1564, 1565, 1565, 1565, 1565,
     1565, 1565, 1569, 1569, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1574, 1574, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1577, 1577, 1578, 1578, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1579,
     1579, 1565, 1565, 1565, 1565, 1565, 1565, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1558, 1558, 1558, 1558, 1558,

     1558, 1558, 1558, 1565, 1565, 1565, 1565, 1565, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1565, 1565, 1565, 1571,
     1571, 1571, 1571, 1571, 1571, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1558, 1558, 1558, 1558, 1558, 1565,
     1571, 1571, 1571, 1576, 1576, 1576, 1576, 1576, 1558, 1565,
     1571, 1576, 1558, 1576,    0, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,

     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485
    } ;

static const flex_int16_t yy_nxt[9761] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   28,   30,   28,   30,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   28,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   28,   28,   30,   30,   28,   28,   24,   25,   62,
       24,   27,   25,   25,   63,   64,   65,   65,   66,   67,
       65,   68,   67,   63,   63,   69,   70,   63,   63,   65,
       63,   65,   71,   72,   73,   63,   74,   75,   76,   77,
       78,   63,   79,   80,   63,   81,   82,   63,   83,   84,

       63,   85,   86,   87,   88,   89,   63,   63,   63,   63,
       65,   65,   90,   63,   24,   25,   62,   24,   27,   25,
       25,   91,   92,   93,   93,   94,   91,   93,   95,   96,
       91,   97,   98,   91,   91,   91,   93,   91,   93,   99,
      100,   91,   91,   91,  101,   91,  102,   91,   91,  103,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,  104,  104,   91,
       91,  106,  107,  108,  109,  106,  106,  173,  183,  173,
      173,  110,  183,  183,  111,  106,  107,  108,  109,  106,
      106,  173,  183,  173,  173,  110,  183,  183,  111,   24,

       25,   62,   24,   27,   25,   25,  112,  113,  114,  115,
      116,  112,  117,  118,  119,  112,  112,  120,  121,  112,
      112,  122,  112,  123,  124,  125,  126,  112,  127,  128,
      112,  129,  130,  112,  131,  112,  112,  132,  133,  112,
      134,  135,  112,  136,  137,  138,  112,  112,  112,  112,
      112,  112,  139,  139,  112,  112,  140,   25,   62,   24,
       27,   25,   25,  141,  142,  140,  140,  143,  141,  140,
      144,  145,  141,  141,  141,  141,  141,  141,  140,  141,
      140,  146,  147,  141,  141,  148,  141,  149,  141,  150,
      141,  151,  152,  141,  141,  153,  141,  154,  155,  141,

      156,  157,  141,  158,  159,  141,  141,  141,  141,  140,
      140,  141,  141,  160,  161,  162,  163,  160,  160,  186,
      165,  166,  186,  166,  165,  165, 1103,  167,  165,  166,
     1242,  166,  165,  165,  185,  167,  187,  188,  668,  187,
      188,  141,  168,  141,  905,  141,  776,  141,  141,  190,
      168,  141, 1000,  141,  141, 1222,  141,  141, 1214,  141,
      141,  170,  171, 1178,  171,  170,  170,  171,  170,  171,
      170,  284,  186,  170,  174,  191,  176,  174,  177,  174,
      345,  186,  174,  178,  179,  186,  290,  192,  186,  187,
      188,  668,  186, 1485,  189,  351,  186,  180,  187,  188,

      193,  193,  187,  188,  368,  187,  194,  187,  187,  187,
      188,  187, 1107,  187,  188, 1485,  289, 1485,  350,  374,
      187, 1104,  187,  402, 1103,  186,  873,  181,  182,  227,
      174,  174,  186,  176,  174,  177,  174,  873,  408,  174,
      178,  179,  187,  188,  186,  195,  844,  196,  844,  187,
      188,  187,  187,  831,  180,  197,  186,  185,  437, 1047,
      438,  187,  188,  198,  185,  199,  355,  209,  200, 1485,
      373,  201,  190,  187,  188,  439,  186,  210,  186,  190,
      355,  211,  831,  212,  181,  182,  186,  174,  186,  213,
      831,  214,  215,  187,  188,  187,  188,  224,  216,  225,

      284, 1485,  407,  187,  188,  187,  188,  202,  284,  186,
      203,  186,  226,  230,  204,  290,  186,  256,  205,  206,
      776,  207,  186,  290,  208,  186,  187,  188,  187,  188,
      186, 1485,  665,  187,  188,  231,  345,  280,  281,  187,
      188,  228,  187,  188,  345,  229,  232,  187,  188,  233,
      186,  351,  217,  234,  274,  218,  219,  186,  220,  351,
      844,  221,  776,  222,  186,  223, 1059,  187,  188,  235,
      236,  668,  368,  237,  187,  188,  240,  238,  897,  368,
      241,  187,  188,  239,  285,  402,  186,  374,  896,  282,
      242,  286,  402,  186,  374,  283,  243,  186,  448,  895,

      408,  287,  288,  187,  188,  251,  894,  408, 1485,  774,
      187,  188,  257,  666,  187,  188,  258,  244,  555,  252,
      186,  245,  253,  259,  186,  254,  432,  255,  246,  247,
      248,  249,  260,  775,  186,  250,  185,  187,  194,  261,
      262,  187,  188,  263,  604,  186,  457,  264,  265,  186,
      266,  187,  188,  267,  432,  268,  269,  270,  285,  830,
      271,  272,  187,  188,  275,  286,  187,  188,  276,  277,
      273,  285,  278,  285,  291,  287,  288,  873,  286,  292,
      286,  841,  452, 1087,  279,  293,  285,  616,  287,  288,
      287,  288,  285,  286,  285,  841,  294,  295,  285,  286,

      362,  286,  843,  287,  288,  286,  296,  186,  362,  287,
      297,  287,  288,  287,  287,  287,  288,  287,  643,  838,
      285, 1485,  829,  285,  187,  188,  287,  286,  287,  448,
      286,  837,  285,  872,  459,  298,  299,  287,  288,  286,
      287,  288,  314,  315,  666,  285,  316,  308,  664,  287,
      288,  663,  286,  285,  555, 1485,  842,  287,  287,  285,
      286,  662,  287,  288,  309,  604,  286,  310,  285,  775,
      287,  288,  661,  322,  311,  286,  287,  288,  312,  660,
      830,  313,  300,  659,  616,  287,  288,  323,  643,  301,
      302,  324,  303,  285,  304,  305,  306,  307,  285,  843,

      286,  285,  615,  872,  614,  286,  667,  189,  286,  667,
      287,  288,  189,  328,  668,  287,  288,  613,  287,  288,
      317,  325,  318,  612,  326,  285,  367,  329,  366,  899,
      319,  184,  286,  285, 1485,  320,  321,  335,  327,  284,
      286, 1485,  287,  288, 1485,  871,  330,  284,  336,  337,
      287,  288,  284,  338,  339,  285,  402,  285,  331,  285,
      333,  332,  286,  334,  286,  402,  286, 1485, 1485,  402,
     1092,  344,  287,  288,  287,  288,  287,  288,  340,  285,
     1485, 1485,  346, 1485,  346, 1485,  286,  352,  341,  347,
      186,  347, 1485,  450,  342,  186,  287,  288,  343,  348,

      349,  348,  349,  346, 1485, 1485, 1485,  187,  188,  353,
      347, 1485,  187,  188, 1485,  348,  348, 1485, 1485,  348,
      348,  349,  354,  355,  354,  354,  354,  354,  348,  346,
      348,  346, 1485, 1485,  346,  453,  347,  346,  347,  356,
      356,  347, 1485, 1485,  347, 1485,  348,  349,  348,  349,
      346,  348,  349, 1485,  348,  357, 1485,  347,  346,  348,
      348, 1485,  346, 1485,  369,  347,  186,  348,  349,  347,
     1485,  370,  451,  358, 1485,  348,  349, 1485, 1485,  348,
      349,  371,  372,  187,  188,  359,  361,  362,  363,  363,
      361,  361, 1485, 1485,  360, 1485,  364, 1485, 1485,  365,

      363,  362,  363,  363,  363,  363, 1485, 1485,  371,  371,
      364, 1485,  371,  365,  363,  362,  363,  363,  363,  363,
     1485,  371,  369,  371,  364,  375,  369,  365,  369,  370,
      369, 1485,  376,  370, 1485,  370, 1485,  370, 1485,  371,
      372,  377,  369,  371,  372,  371,  372,  371,  372,  370,
      369, 1485,  371,  371,  378,  369, 1485,  370,  369,  371,
      372, 1485,  370,  369, 1485,  370, 1485,  371,  379,  186,
      370,  369,  371,  372, 1485,  371,  372,  369,  370, 1485,
      371,  372, 1485, 1485,  370, 1485,  187,  188,  371,  372,
      383,  381,  380,  369,  371,  372,  382, 1485, 1485,  387,

      370,  388,  369, 1485,  384, 1485,  369,  385, 1485,  370,
      371,  372,  386,  370, 1485,  389, 1485, 1485,  186,  371,
      372,  390, 1485,  371,  372,  391, 1485,  369, 1485,  392,
     1485,  369, 1485,  369,  370,  187,  188, 1485,  370,  369,
      370,  458, 1485,  393,  371,  372,  370,  394,  371,  372,
      371,  372,  395, 1485,  369, 1485,  371,  372,  403, 1485,
      398,  370, 1485,  403,  396,  404,  409,  397, 1485, 1485,
      404,  371,  372,  399,  186,  405,  406,  400,  403, 1485,
      405,  406,  403, 1485,  410,  404,  403,  401, 1485,  404,
      186,  187,  188,  404,  469,  405,  406,  405,  405,  405,

      406,  405,  403,  405,  411, 1485,  403,  187,  188,  404,
      405,  470,  405,  404,  403, 1485, 1485, 1485,  403,  405,
      406,  404, 1485,  405,  406,  404,  415, 1485,  456,  420,
     1485,  405,  406, 1485,  418,  405,  406,  415,  422,  186,
     1485,  405,  405,  403,  419,  403,  421,  193,  193, 1485,
      404,  403,  404, 1485,  186, 1485,  187,  188,  404, 1485,
      405,  406,  405,  406, 1485,  415,  412, 1485,  405,  406,
      403,  187,  188,  413,  414, 1485, 1485,  404,  415,  416,
      417,  454,  423,  403,  455,  424,  403,  405,  406, 1485,
      404, 1485,  403,  404,  186, 1485, 1485, 1485,  403,  404,

      405,  406, 1485,  405,  406,  404,  425, 1485,  415,  405,
      406,  187,  188,  415, 1485,  405,  406,  430, 1485,  426,
      667, 1485,  189,  667,  427,  428,  189, 1485, 1485,  429,
      431,  432,  433,  433,  431,  431,  449,  187,  187, 1485,
      434,  187, 1485,  435,  433,  432,  433,  433,  433,  433,
      187, 1485,  187, 1485,  434,  443,  443,  435,  433,  432,
      433,  433,  433,  433, 1485,  187,  187,  444,  434,  187,
      186,  435, 1485, 1485,  445,  186, 1485, 1485,  187,  186,
      187,  187,  187, 1485,  446, 1485,  186,  187,  188,  186,
      447,  460,  187,  188,  186, 1485,  187,  188,  461,  443,

      443, 1485,  462,  187,  188,  186,  187,  188,  463,  187,
      187,  187,  188,  186, 1485,  186, 1485,  468,  186,  464,
      465,  466,  187,  188, 1485,  186, 1485, 1485,  467,  186,
      187,  188,  187,  188,  186,  187,  188, 1485, 1485,  473,
      186,  471,  187,  188,  472,  186,  187,  188,  475, 1485,
      476,  187,  188,  186, 1485,  474,  186,  187,  188,  479,
     1485, 1485,  187,  188,  478, 1100, 1100,  477,  186, 1485,
      187,  188, 1485,  187,  188,  186, 1485,  186,  480,  186,
     1485,  186,  271,  481, 1485,  187,  188,  186, 1485,  482,
      186,  483,  187,  188,  187,  188,  187,  188,  187,  188,

      488,  484, 1485, 1485,  187,  188,  186,  187,  188, 1100,
     1100,  486,  186, 1485,  485,  186, 1485,  487, 1485,  186,
      489,  186, 1485,  187,  188,  186,  491,  490,  186,  187,
      188,  186,  187,  188,  186,  493,  187,  188,  187,  188,
      495,  186,  187,  188,  492,  187,  188, 1485,  187,  188,
     1485,  187,  188,  494,  496,  186, 1485,  186,  187,  188,
     1485,  186, 1485,  186, 1485,  499,  497,  186,  498,  186,
     1485,  186,  187,  188,  187,  188, 1485,  501,  187,  188,
      187,  188, 1485,  500,  187,  188,  187,  188,  187,  188,
      186, 1485,  502,  503,  186,  507,  186,  271,  506,  505,

      186,  509,  504,  186, 1485, 1485, 1485,  187,  188,  186,
     1485,  187,  188,  187,  188,  186, 1485,  187,  188, 1485,
      187,  188,  186,  508,  186, 1485,  187,  188, 1485,  271,
     1485, 1485,  187,  188, 1485, 1485,  186,  510,  186,  187,
      188,  187,  188,  186, 1485,  511,  186,  512, 1485,  513,
     1485,  514,  186,  187,  188,  187,  188,  515,  517,  516,
      187,  188,  186,  187,  188,  518, 1485,  186,  520,  187,
      188,  667, 1485,  289,  667, 1485,  186,  289, 1485,  187,
      188,  519,  186,  521,  187,  188,  522,  523, 1485,  524,
      186, 1485,  525,  187,  188,  527, 1485, 1485, 1485,  187,

      188,  186, 1485, 1485,  526, 1485,  528,  187,  188,  186,
     1485, 1485,  186, 1485,  529,  530, 1485, 1485,  187,  188,
      186, 1485, 1485,  531,  186, 1485,  187,  188, 1485,  187,
      188,  186, 1485, 1485,  532,  535,  186,  187,  188,  533,
      539,  187,  188,  536,  186,  534,  186,  537,  187,  188,
      271,  540,  186,  187,  188,  186, 1100, 1100, 1485,  186,
      538,  187,  188,  187,  188,  543,  186, 1485,  541,  187,
      188,  186,  187,  188, 1485,  542,  187,  188, 1485,  544,
      186, 1485, 1485,  187,  188,  186,  549,  186,  187,  188,
     1485,  545,  186, 1485,  548,  546, 1485,  187,  188,  547,

     1100, 1100,  187,  188,  187,  188,  186, 1485,  550,  187,
      188,  554,  553,  285, 1485,  285, 1485, 1485,  551,  285,
      286, 1485,  286,  187,  188,  552,  286, 1485,  285, 1485,
      287,  288,  287,  288,  558,  286,  287,  297,  556,  287,
      287,  285, 1485,  287,  557,  287,  288, 1485,  286,  285,
     1485, 1485,  287,  285,  287,  285,  286,  285,  287,  288,
      286,  285,  286, 1485,  286, 1485,  287,  288,  286, 1485,
      287,  288,  287,  288,  287,  288,  287,  287,  287,  288,
      287, 1485, 1485,  287,  287,  285, 1485,  285, 1485,  287,
      285,  287,  286,  285,  286, 1485, 1485,  286,  559,  285,

      286, 1485,  287,  288,  287,  288,  286,  287,  288,  561,
      287,  288, 1485,  562, 1485, 1485,  287,  288,  285, 1485,
      287,  287,  304,  560, 1485,  286,  285, 1485, 1485, 1485,
      563,  564,  285,  286,  285,  287,  288, 1485, 1485,  286,
      285,  286,  186,  287,  288, 1485,  285,  286,  285,  287,
      288,  287,  288,  286,  566,  286,  565,  287,  288,  187,
      188, 1485,  285,  287,  288,  287,  288,  567,  569,  286,
      285, 1485,  186, 1485,  285, 1485,  285,  286,  568,  287,
      288,  286, 1485,  286, 1485, 1485,  186,  287,  288,  187,
      188,  287,  288,  287,  288,  285, 1485, 1485,  285, 1485,

      570, 1485,  286,  187,  188,  286,  571,  572,  673, 1485,
     1485,  285,  287,  288,  573,  287,  288,  575,  286,  285,
     1485,  576, 1485, 1485,  285, 1485,  286, 1485,  287,  288,
      574,  286,  285, 1485,  577, 1485,  287,  288, 1485,  286,
      285,  287,  288, 1485,  285,  578, 1485,  286,  285,  287,
      288,  286,  285, 1485, 1485,  286, 1485,  287,  288,  286,
     1485,  287,  288,  579,  285,  287,  288,  285,  581,  287,
      288,  286,  285, 1485,  286, 1485,  583,  580,  284,  286,
      284,  287,  288, 1485,  287,  288,  582,  584,  284,  287,
      288,  285,  587,  585,  586, 1485,  285,  589,  286,  285,

      588, 1485, 1485,  286,  285, 1485,  286, 1485,  287,  288,
     1485,  286, 1485,  287,  288, 1485,  287,  288,  285, 1485,
      285,  287,  288, 1485,  596,  286,  285,  286,  590,  591,
     1485, 1485,  285,  286,  592,  287,  288,  287,  288,  286,
      593,  594, 1485,  287,  288, 1485,  285, 1485,  285,  287,
      288,  595, 1485,  286,  285,  286,  667, 1485,  350,  667,
      285,  286,  350,  287,  288,  287,  288,  286,  597,  598,
     1485,  287,  288,  285,  600,  285, 1485,  287,  288, 1485,
      286,  285,  286, 1485,  599, 1485, 1485,  285,  286, 1485,
      287,  288,  287,  288,  286, 1485,  601, 1485,  287,  288,

     1485,  346,  602,  346,  287,  288,  346, 1485,  347, 1485,
      347, 1485, 1485,  347, 1485,  346, 1485,  603,  348,  349,
      348,  349,  347,  348,  357,  605,  348,  348,  346, 1485,
      348,  606,  348,  349, 1485,  347,  346, 1485, 1485,  348,
     1485,  348,  607,  347, 1485,  348,  349,  354,  355,  354,
      354,  354,  354,  348,  349,  346, 1485,  608, 1485, 1485,
      609, 1485,  347,  356,  356,  348,  348,  346, 1485,  348,
      348,  348,  348,  349,  347,  346, 1485,  186,  348, 1485,
      348, 1485,  347, 1485,  348,  349,  361,  362,  363,  363,
      361,  361,  348,  349,  187,  188,  364,  610, 1485,  365,

      369, 1485, 1485, 1485,  674,  611, 1485,  370, 1485,  348,
      348,  363,  362,  363,  363,  363,  363,  371,  372,  369,
     1485,  364,  369, 1485,  365, 1485,  370, 1485, 1485,  370,
      617,  371,  371, 1485,  186,  371,  371,  372,  369,  371,
      379,  618,  369, 1485,  371,  370,  371,  369,  619,  370,
      369,  187,  188,  675,  370,  371,  372,  370, 1485,  371,
      372, 1485, 1485, 1485,  371,  372, 1485,  371,  372,  371,
      371,  369, 1485,  371,  369,  371,  371,  186,  370,  369,
     1485,  370,  371,  369,  371, 1485,  370, 1485,  371,  372,
      370,  371,  372, 1485,  187,  188,  371,  372, 1485, 1485,

      371,  372,  369, 1485, 1485,  621,  622,  679,  620,  370,
      369, 1485,  623,  371,  371,  369, 1485,  370,  369,  371,
      372,  624,  370, 1485,  369,  370, 1485,  371,  372, 1485,
     1485,  370,  371,  372,  628,  371,  372,  369,  625,  369,
     1485,  371,  372,  626,  370,  369,  370,  629, 1485, 1485,
     1485, 1485,  370,  627,  371,  372,  371,  372,  369, 1485,
      630,  369,  371,  372,  369,  370,  369, 1485,  370,  632,
     1485,  370, 1485,  370, 1485,  371,  372,  631,  371,  372,
      369,  371,  372,  371,  372, 1485,  628,  370, 1485,  633,
     1485,  402,  636, 1485,  369,  634,  635,  371,  372,  637,

      402,  370,  369, 1485,  402, 1090,  369,  402,  369,  370,
      638,  371,  372,  370,  369,  370, 1485,  639, 1485,  371,
      372,  370, 1485,  371,  372,  371,  372,  640,  403,  641,
      403,  371,  372,  403, 1485,  404, 1485,  404, 1485, 1485,
      404, 1485,  403, 1485,  642,  405,  406,  405,  406,  404,
      405,  411,  644,  405,  405,  403, 1485,  405,  645,  405,
      406, 1485,  404,  403, 1485, 1485,  405, 1485,  405,  646,
      404, 1485,  405,  406,  405,  405,  403,  415,  405, 1485,
      405,  406, 1485,  404,  403, 1485, 1485,  405, 1485,  405,
      186,  404,  403,  405,  406,  647,  403,  405,  405,  404,

     1485,  405,  406,  404,  415,  403, 1485,  187,  188,  405,
      406, 1485,  404,  405,  406, 1485,  680,  403,  405,  405,
     1485, 1485,  405,  406,  404,  403,  415,  415, 1485,  403,
     1485,  403,  404,  403,  405,  406,  404,  403,  404,  648,
      404, 1485,  405,  406,  404, 1485,  405,  406,  405,  406,
      405,  406,  651,  403,  405,  406, 1485, 1485,  403, 1485,
      404,  650,  652,  649,  402,  404,  415,  403, 1485, 1485,
      405,  406, 1485,  402,  404,  405,  406,  402, 1091,  403,
      402,  403, 1485, 1485,  405,  406,  404,  403,  404,  186,
      415,  653, 1485,  403,  404,  186,  405,  406,  405,  406,

      404,  656, 1485,  654,  405,  406,  187,  188, 1485, 1485,
      405,  406,  187,  188,  657,  655, 1485,  431,  432,  433,
      433,  431,  431, 1485, 1485,  676, 1485,  434, 1485,  658,
      435,  433,  432,  433,  433,  433,  433, 1485,  677, 1485,
     1485,  434,  186, 1485,  435,  667,  186, 1485,  667, 1485,
     1485, 1485, 1485,  669,  667,  667,  186, 1485,  667,  187,
      188,  678,  186,  187,  188,  670,  186,  667,  186,  667,
      671,  672,  186,  187,  188,  186, 1485,  681, 1485,  187,
      188,  682, 1485,  187,  188,  187,  188,  186,  692,  187,
      188, 1485,  187,  188,  186,  696, 1485, 1485,  667,  667,

      667,  683, 1485,  667,  187,  188, 1485,  684,  669,  667,
      667,  187,  188,  667,  693,  687,  688,  186,  685,  186,
      670,  686,  667,  186,  667,  671,  672,  186, 1485,  186,
     1485,  689,  690,  186,  187,  188,  187,  188,  186, 1485,
      187,  188,  694,  186,  187,  188,  187,  188, 1485,  691,
      187,  188,  186,  667,  667,  187,  188,  697,  695,  186,
      187,  188,  186, 1485,  186, 1485,  700, 1485,  699,  187,
      188,  186, 1485, 1485,  698,  186,  187,  188,  186,  187,
      188,  187,  188, 1485,  271, 1485,  703,  186,  187,  188,
      701,  186,  187,  188,  186,  187,  188,  702, 1485, 1485,

      707,  186,  704,  186,  187,  188,  186, 1485,  187,  188,
      706,  187,  188, 1485,  708, 1485,  705, 1485,  187,  188,
      187,  188,  186,  187,  188,  186, 1485, 1485, 1485, 1485,
     1485,  186,  710,  186, 1485,  709,  711, 1485, 1485,  187,
      188,  186,  187,  188,  186,  712, 1485,  713,  187,  188,
      187,  188,  186, 1485,  714, 1485,  715,  186,  187,  188,
     1485,  187,  188,  716,  186, 1485,  186, 1485,  186,  187,
      188,  186, 1485,  718,  187,  188,  186, 1485,  717, 1485,
     1485,  187,  188,  187,  188,  187,  188,  186,  187,  188,
      720, 1485, 1485,  187,  188, 1485,  186,  719,  186, 1485,

     1485, 1485, 1485,  186,  187,  188,  186,  721,  186,  722,
      727, 1485,  723,  187,  188,  187,  188,  724,  726,  186,
      187,  188,  186,  187,  188,  187,  188,  725,  271,  186,
     1485,  186, 1485,  186, 1485, 1485,  187,  188, 1485,  187,
      188, 1485, 1485,  186, 1485,  728,  187,  188,  187,  188,
      187,  188,  186,  731,  186,  730,  186, 1485,  186,  729,
      187,  188,  186, 1485,  733,  732,  186,  734, 1485,  187,
      188,  187,  188,  187,  188,  187,  188, 1485,  736,  187,
      188,  735, 1485,  187,  188,  738,  186, 1485, 1485,  186,
     1485, 1485, 1485,  186,  737,  186, 1485,  186, 1485,  740,

     1485,  739,  186,  187,  188,  741,  187,  188, 1485,  742,
      187,  188,  187,  188,  187,  188,  186, 1485,  744,  187,
      188, 1485, 1485,  186, 1485,  743,  186, 1485,  186, 1485,
     1485,  186, 1485,  187,  188, 1485, 1485,  186,  745,  746,
      187,  188,  186,  187,  188,  187,  188,  748,  187,  188,
     1485,  186, 1485,  271,  187,  188,  186,  749, 1485,  187,
      188,  186, 1485,  186,  751, 1485, 1485,  747,  187,  188,
      186, 1485,  186,  187,  188,  750, 1485, 1485,  187,  188,
      187,  188,  755,  752,  186, 1485, 1485,  187,  188,  187,
      188,  186, 1485,  186,  753,  754, 1485, 1485,  186, 1485,

     1485,  187,  188,  757, 1485, 1485,  186,  756,  187,  188,
      187,  188,  186, 1485,  759,  187,  188,  762,  760,  761,
      186, 1485,  758,  187,  188, 1485, 1485,  186, 1485,  187,
      188,  186,  765,  763,  186, 1485,  186,  187,  188,  186,
     1485,  186, 1485,  764,  187,  188, 1485, 1485,  187,  188,
      766,  187,  188,  187,  188, 1485,  187,  188,  187,  188,
      186, 1485,  285,  768,  285,  771,  770,  285,  767,  286,
      769,  286,  186,  772,  286, 1485,  285,  187,  188,  287,
      288,  287,  288,  286,  287,  288, 1485, 1485,  285,  187,
      188, 1485, 1485,  287,  288,  286, 1485,  782,  773,  667,

     1485, 1485,  667,  783, 1485,  287,  288,  777,  667,  667,
      285, 1485,  667,  784,  778, 1485,  284,  286,  786,  779,
     1485,  667,  285,  667,  780,  781,  284,  287,  288,  286,
      285,  787,  284, 1485, 1485, 1485, 1485,  286,  285,  287,
      288,  785, 1485,  285, 1485,  286, 1485,  287,  288, 1485,
      286, 1485,  667,  667,  667,  287,  288,  667, 1485, 1485,
      287,  288,  777,  667,  667,  285, 1485,  667, 1485,  778,
     1485,  186,  286, 1485,  779,  284,  667,  790,  667,  780,
      781,  789,  287,  288,  580,  284,  791,  285,  187,  188,
      792,  793, 1485,  794,  286,  285, 1485, 1485, 1485,  285,

     1485,  788,  286,  186,  287,  288,  286,  667,  667,  908,
      795,  285,  287,  288, 1485,  285,  287,  288,  286, 1485,
      187,  188,  286, 1485,  285, 1485,  796,  285,  287,  288,
      797,  286,  287,  288,  286, 1485, 1485,  799,  800,  285,
      909,  287,  288,  798,  287,  288,  286,  285, 1485, 1485,
      801, 1485, 1485,  285,  286,  285,  287,  288,  802,  803,
      286, 1485,  286, 1485,  287,  288, 1485,  285, 1485,  804,
      287,  288,  287,  288,  286,  285, 1485, 1485,  806,  285,
     1485,  285,  286,  805,  287,  288,  286,  285,  286, 1485,
      807, 1485,  287,  288,  286, 1485,  287,  288,  287,  288,

     1485, 1485,  285, 1485,  287,  288,  811,  285, 1485,  286,
      285, 1485,  809,  808,  286,  285, 1485,  286,  810,  287,
      288, 1485,  286, 1485,  287,  288, 1485,  287,  288, 1485,
      813,  285,  287,  288,  285, 1485,  814,  285,  286,  812,
      285,  286, 1485, 1485,  286, 1485, 1485,  286,  287,  288,
      186,  287,  288,  285,  287,  288,  186,  287,  288, 1485,
      286,  818,  285,  815, 1485,  285, 1485,  187,  188,  286,
      287,  288,  286,  187,  188,  817, 1485,  816,  285,  287,
      288, 1485,  287,  288, 1485,  286,  916,  285,  820, 1485,
      285,  819, 1485,  910,  286,  287,  288,  286,  186,  822,

     1485, 1485,  285,  821,  287,  288,  823,  287,  288,  286,
     1485,  824, 1485, 1485,  285,  187,  188,  285, 1485,  287,
      288,  286,  346, 1485,  286,  911, 1485,  825, 1485,  347,
      346,  287,  288,  826,  287,  288, 1485,  347, 1485,  348,
      349, 1485,  186, 1485,  346, 1485,  827,  348,  349,  839,
     1485,  347, 1485, 1485,  828,  667, 1485, 1485,  667,  187,
      188,  348,  349,  832,  667,  667,  369,  928,  667,  369,
      833,  369, 1485,  370,  186,  834,  370,  667,  370,  667,
      835,  836,  840,  371,  372, 1485,  371,  372,  371,  372,
     1485,  187,  188, 1485,  369, 1485, 1485,  369, 1485,  369,

     1485,  370,  850,  912,  370, 1485,  370,  628,  667,  667,
      667,  371,  372,  667,  371,  372,  371,  372,  832,  667,
      667, 1485,  369,  667,  369,  833,  369, 1485,  851,  370,
      834,  370,  667,  370,  667,  835,  836,  854,  856,  371,
      372,  371,  372,  371,  372, 1485,  852, 1485, 1485,  369,
     1485, 1485,  857, 1485,  369,  855,  370, 1485, 1485,  853,
     1485,  370, 1485,  667,  667,  667,  371,  372,  667, 1485,
     1485,  371,  372,  845,  667,  667,  369,  861,  667,  369,
      846, 1485, 1485,  370,  186,  847,  370,  667,  369,  667,
      848,  849,  369,  371,  372,  370,  371,  372, 1485,  370,

     1485,  187,  188, 1485,  369,  371,  372,  858,  859,  371,
      372,  370, 1485,  915, 1485,  860, 1485, 1485,  667,  667,
      667,  371,  372,  667, 1485,  628,  628, 1485,  845,  667,
      667,  369, 1485,  667, 1485,  846,  369, 1485,  370,  186,
      847,  862,  667,  370,  667,  848,  849,  186,  371,  372,
      863,  369, 1485,  371,  372, 1485,  187,  188,  370,  864,
      369, 1485,  914,  369,  187,  188, 1485,  370,  371,  372,
      370, 1485,  369,  667,  667,  369, 1485,  371,  372,  370,
      371,  372,  370,  865,  867,  913, 1485,  369, 1485,  371,
      372, 1485,  371,  372,  370,  403,  869, 1485,  868, 1485,

     1485,  186,  404,  866,  371,  372,  870, 1485,  403, 1485,
     1485, 1485,  405,  406,  667,  404, 1485,  667,  187,  188,
     1485, 1485,  874,  667,  667,  405,  406,  667,  918,  875,
      403, 1485, 1485, 1485,  876, 1485,  667,  404,  667,  877,
      878, 1485,  403, 1485,  403,  879, 1485,  405,  406,  404,
     1485,  404, 1485,  885, 1485, 1485, 1485, 1485,  186,  405,
      406,  405,  406,  403, 1485,  886, 1485,  667,  667,  667,
      404, 1485,  667, 1485,  887,  187,  188,  874,  667,  667,
      405,  406,  667, 1485,  875,  923, 1485,  186, 1485,  876,
      403,  667,  403,  667,  877,  878,  403,  404, 1485,  404,

      415, 1485, 1485,  404,  187,  188,  919,  405,  406,  405,
      406, 1485, 1485,  405,  406,  890, 1485, 1485, 1485,  403,
     1485, 1485,  667,  667,  403, 1485,  404,  403,  888,  186,
      889,  404,  403, 1485,  404,  186,  405,  406, 1485,  404,
      891,  405,  406, 1485,  405,  406,  187,  188,  880,  405,
      406, 1485,  187,  188,  186,  881,  892,  882,  922,  893,
     1485,  883,  884, 1485,  881,  917, 1485,  186, 1485,  415,
      900,  187,  188,  900, 1485, 1485, 1485, 1485,  902,  900,
      900,  920,  186,  900,  187,  188,  186,  921, 1485,  186,
     1485, 1485,  900,  186,  900,  903,  904,  186, 1485,  187,

      188,  186, 1485,  187,  188,  924,  187,  188, 1485,  925,
      187,  188,  186, 1485,  187,  188,  929, 1485,  187,  188,
     1485, 1485,  930,  900,  900,  667,  186,  926,  667,  187,
      188, 1485,  927,  907,  671,  671,  186, 1485,  671,  186,
     1485,  186,  931,  187,  188, 1485, 1485,  671,  186,  671,
      667,  667,  186,  187,  188,  186,  187,  188,  187,  188,
     1485, 1485,  932,  186,  935,  187,  188,  186, 1485,  187,
      188,  934,  187,  188,  937,  933,  186, 1485,  671,  671,
      187,  188, 1485,  186,  187,  188,  936, 1485, 1485,  186,
     1485, 1485,  186,  187,  188,  186, 1485, 1485, 1485,  938,

      187,  188, 1485,  186, 1485,  939,  187,  188,  940,  187,
      188, 1485,  187,  188,  186,  942, 1485, 1485,  186,  941,
      187,  188,  186, 1485,  186,  945,  186, 1485,  186,  943,
     1485,  187,  188, 1485,  944,  187,  188, 1485,  186,  187,
      188,  187,  188,  187,  188,  187,  188, 1485,  947,  186,
     1485,  946,  186, 1485,  949,  187,  188,  186, 1485, 1485,
      186, 1485,  186, 1485,  948, 1485,  187,  188,  186,  187,
      188, 1485, 1485,  186,  187,  188,  950,  187,  188,  187,
      188,  186,  951,  186, 1485,  187,  188,  954,  186,  953,
      187,  188,  186,  952, 1485,  186,  955, 1485,  187,  188,

      187,  188,  186, 1485,  186,  187,  188,  186, 1485,  187,
      188,  957,  187,  188,  186,  956, 1485, 1485,  186,  187,
      188,  187,  188, 1485,  187,  188,  186,  959,  186, 1485,
     1485,  187,  188,  186,  960,  187,  188,  961,  186, 1485,
      958,  186, 1485,  187,  188,  187,  188,  186,  962, 1485,
      187,  188,  186, 1485,  964,  187,  188,  186,  187,  188,
     1485,  963, 1485,  186,  187,  188,  967, 1485,  186,  187,
      188, 1485,  966,  186,  187,  188, 1485,  965,  186,  968,
      187,  188, 1485, 1485,  969,  187,  188,  186, 1485,  970,
      187,  188,  186, 1485,  524,  187,  188,  186, 1485,  186,

      971, 1485,  186, 1485,  187,  188, 1485, 1485, 1485,  187,
      188, 1485, 1485,  186,  187,  188,  187,  188, 1485,  187,
      188, 1485, 1485,  186,  972,  976,  186, 1485,  186,  973,
      187,  188,  186, 1485,  186,  975,  974,  186, 1485,  977,
      187,  188,  186,  187,  188,  187,  188,  980, 1485,  187,
      188,  187,  188,  186,  187,  188,  186, 1485, 1485,  187,
      188,  978,  186, 1485,  979,  982,  186, 1485,  186,  981,
      187,  188, 1485,  187,  188,  984,  186, 1485, 1485,  187,
      188, 1485, 1485,  187,  188,  187,  188,  186, 1485, 1485,
      986,  186, 1485,  187,  188, 1485,  983, 1485,  186,  985,

      186, 1485,  186, 1485,  187,  188,  988,  186,  187,  188,
     1485, 1485, 1485,  987,  989,  187,  188,  187,  188,  187,
      188,  990,  285,  992,  187,  188,  991,  667,  289,  286,
      667,  285, 1485,  289, 1485,  776, 1485, 1485,  286,  287,
      288, 1485, 1485, 1003, 1485,  285, 1485, 1485,  287,  288,
      994,  900,  286, 1485,  900, 1485, 1485, 1485, 1485,  996,
      900,  900,  287,  288,  900, 1485,  997,  285, 1485, 1485,
     1485,  285, 1485,  900,  286,  900,  998,  999,  286,  285,
     1485,  186, 1004,  285,  287,  288,  286, 1485,  287,  288,
      286, 1485, 1485, 1485, 1006,  285,  287,  288,  187,  188,

      287,  288,  286, 1485,  900,  900,  667, 1485, 1485,  667,
     1005, 1485,  287,  288, 1002,  780,  780, 1007,  285,  780,
      186, 1485, 1485, 1485,  186,  286,  580,  285,  780, 1485,
      780,  667,  667, 1009,  286,  287,  288,  187,  188,  285,
     1485,  187,  188, 1112,  287,  288,  286, 1114, 1485, 1485,
     1485, 1008, 1485, 1113,  285, 1485,  287,  288,  580,  780,
      780,  286, 1485, 1485, 1485, 1010,  285, 1485,  285, 1485,
      580,  287,  288,  286,  285,  286, 1485, 1011, 1485, 1485,
      580,  286, 1485,  287,  288,  287,  288,  285, 1485,  285,
     1485,  287,  288, 1013,  286, 1485,  286, 1485, 1485, 1485,

     1012,  285, 1485,  285,  287,  288,  287,  288,  286,  285,
      286, 1485, 1014, 1485, 1485,  285,  286, 1485,  287,  288,
      287,  288,  286,  285, 1015, 1485,  287,  288,  285, 1485,
      286, 1485,  287,  288, 1485,  286,  285, 1485, 1485, 1016,
      287,  288, 1017,  286, 1485,  287,  288, 1485, 1485, 1018,
     1485,  285, 1485,  287,  288, 1021,  285, 1485,  286,  285,
     1485, 1019, 1485,  286, 1485,  285,  286, 1020,  287,  288,
     1485,  285,  286,  287,  288, 1485,  287,  288,  286,  285,
     1485, 1022,  287,  288, 1485,  285,  286,  285,  287,  288,
     1024, 1485,  286,  285,  286, 1485,  287,  288, 1023,  285,

      286, 1025,  287,  288,  287,  288,  286,  285, 1026, 1485,
      287,  288,  285, 1485,  286,  285,  287,  288, 1485,  286,
     1485, 1485,  286,  186,  287,  288, 1027,  285, 1485,  287,
      288, 1030,  287,  288,  286,  285, 1028, 1485, 1029,  285,
      187,  188,  286, 1115,  287,  288,  286,  285, 1038,  186,
     1031, 1485,  287,  288,  286,  285,  287,  288, 1032, 1485,
     1485,  285,  286,  285,  287,  288,  187,  188,  286,  285,
      286, 1116,  287,  288, 1485, 1039,  286, 1033,  287,  288,
      287,  288, 1035,  285, 1034,  285,  287,  288,  667,  350,
      286,  667,  286, 1037,  350, 1485,  831, 1485, 1485, 1036,

      287,  288,  287,  288, 1485, 1485,  346, 1485,  315, 1485,
     1485, 1041,  900,  347,  186,  900, 1485, 1485, 1485, 1485,
     1043,  900,  900,  348,  349,  900,  369, 1044,  346, 1485,
     1485,  187,  188,  370,  900,  347,  900, 1045, 1046, 1485,
     1485, 1117,  186,  371,  372,  348,  349, 1062, 1485, 1050,
     1485, 1051, 1485, 1485, 1485,  667,  373, 1485,  667,  187,
      188,  373, 1485,  844,  369,  900,  900,  667, 1485, 1485,
      667,  370, 1485, 1485, 1485, 1049,  835,  835, 1053,  369,
      835,  371,  372,  369, 1485, 1485,  370,  369, 1485,  835,
      370,  835,  667,  667,  370,  369,  371,  372, 1485, 1485,

      371,  372,  370, 1063,  371,  372, 1064, 1485, 1485, 1073,
      369, 1485,  371,  372, 1485, 1485,  628,  370, 1485, 1485,
      835,  835,  900, 1485, 1485,  900, 1485,  371,  372, 1066,
     1055,  900,  900, 1065,  369,  900,  369, 1056,  369, 1485,
     1485,  370, 1485,  370,  900,  370,  900, 1057, 1058, 1485,
      186,  371,  372,  371,  372,  371,  372, 1067, 1485, 1068,
     1485, 1485, 1485, 1485, 1485, 1485,  369,  187,  188, 1485,
     1485,  369, 1069,  370,  369,  900,  900,  667,  370,  186,
      667,  370, 1485,  371,  372, 1061,  848,  848,  371,  372,
      848,  371,  372, 1071,  186, 1485,  187,  188,  369,  848,

     1485,  848,  667,  667, 1070,  370, 1485,  369, 1485, 1485,
     1485,  187,  188,  628,  370,  371,  372, 1072, 1485,  369,
     1485, 1485,  369, 1485,  371,  372,  370,  369, 1074,  370,
      848,  848, 1124, 1485,  370, 1485,  371,  372, 1485,  371,
      372,  369, 1485, 1485,  371,  372, 1485,  369,  370, 1485,
     1077, 1485, 1485, 1076,  370,  369, 1075, 1485,  371,  372,
      667,  407,  370,  667,  371,  372,  407,  186,  873,  403,
     1485,  403,  371,  372, 1078, 1485,  404, 1485,  404,  628,
     1485, 1485, 1485, 1081,  187,  188,  405,  406,  405,  406,
     1485, 1485, 1485, 1079,  900, 1485,  186,  900, 1485, 1119,

     1485, 1485, 1083,  900,  900,  403,  415,  900,  403, 1084,
      403, 1485,  404,  187,  188,  404,  900,  404,  900, 1085,
     1086, 1485,  405,  406, 1485,  405,  406,  405,  406, 1485,
     1485,  881, 1485,  667,  189, 1485,  667,  403, 1485,  189,
     1093,  668, 1485,  403,  404, 1485, 1094,  900,  900,  667,
      404,  186,  667, 1485,  405,  406,  899, 1089,  877,  877,
      405,  406,  877,  403, 1485, 1485, 1096, 1485,  187,  188,
      404,  877,  403,  877,  667,  667, 1095,  403, 1485,  404,
      405,  406, 1100, 1100,  404, 1485, 1485, 1485, 1118,  405,
      406,  403, 1485, 1485,  405,  406, 1485,  403,  404, 1485,

      415,  186,  877,  877,  404, 1485, 1101, 1098,  405,  406,
     1097, 1102, 1100, 1100,  405,  406, 1485, 1102,  187,  188,
     1485,  186,  415, 1485, 1099,  186, 1100, 1100,  186,  900,
      189, 1485,  900, 1120, 1485,  189, 1101,  901,  187,  188,
     1485, 1102,  187,  188, 1123,  187,  188, 1102, 1485,  671,
      671, 1121, 1106,  671, 1485, 1485, 1100, 1100,  900, 1485,
     1122,  900,  671, 1485,  671, 1485,  902,  900,  900,  667,
      665,  900,  667,  186, 1485,  665, 1485,  906,  186, 1485,
      900,  186,  900,  903,  904, 1485,  186, 1485, 1485,  186,
      187,  188, 1111,  671,  671,  187,  188, 1125,  187,  188,

     1485,  186, 1127,  187,  188, 1126,  187,  188, 1129, 1485,
      186,  900,  900,  900,  186, 1485,  900, 1485,  187,  188,
     1485, 1109,  903,  903, 1128,  186,  903,  187,  188, 1485,
     1485,  187,  188,  186, 1485,  903,  186,  903,  900,  900,
      186, 1131,  187,  188,  186, 1485, 1130, 1132, 1485, 1485,
      187,  188,  186,  187,  188, 1133,  186,  187,  188,  186,
     1485,  187,  188, 1135, 1485, 1485,  903,  903,  186,  187,
      188,  186, 1134,  187,  188,  186,  187,  188, 1139, 1137,
      186, 1485, 1136, 1138, 1485,  187,  188, 1140,  187,  188,
      186, 1485,  187,  188,  186, 1485,  186,  187,  188,  186,

     1485,  186, 1141,  186, 1485,  186, 1485,  187,  188,  186,
     1485,  187,  188,  187,  188, 1485,  187,  188,  187,  188,
      187,  188,  187,  188,  186, 1485,  187,  188, 1145, 1142,
      186, 1485, 1485, 1143,  186, 1485,  186, 1485, 1485, 1485,
      186,  187,  188, 1485,  186, 1144,  186,  187,  188,  186,
     1146,  187,  188,  187,  188, 1485, 1147,  187,  188,  186,
     1148,  187,  188,  187,  188, 1485,  187,  188,  186, 1485,
     1149,  186, 1485, 1150, 1151,  186,  187,  188,  186, 1153,
     1154, 1485,  186, 1152,  186,  187,  188, 1485,  187,  188,
      186, 1485,  187,  188,  186,  187,  188, 1485, 1156,  187,

      188,  187,  188, 1155, 1485, 1158,  186,  187,  188,  186,
     1485,  187,  188,  186, 1157, 1485,  186, 1485, 1485, 1485,
     1159,  186, 1160,  187,  188, 1485,  187,  188,  186, 1485,
      187,  188, 1161,  187,  188,  186, 1163, 1485,  187,  188,
      186, 1485, 1164,  186, 1485,  187,  188, 1162,  186, 1485,
      186, 1485,  187,  188, 1485, 1165,  186,  187,  188,  186,
      187,  188, 1485, 1485, 1485,  187,  188,  187,  188, 1485,
      186, 1485, 1166,  187,  188, 1168,  187,  188,  186, 1485,
     1167, 1170,  186, 1485,  186, 1485, 1169,  187,  188,  186,
     1485,  186, 1485, 1485,  186,  187,  188,  186, 1485,  187,

      188,  187,  188,  186, 1485,  186,  187,  188,  187,  188,
     1171,  187,  188, 1485,  187,  188, 1485, 1485, 1485, 1172,
      187,  188,  187,  188, 1485, 1485, 1485, 1173,  186,  667,
      289, 1175,  667,  285, 1485,  289, 1485,  776, 1485, 1174,
      286,  900,  289, 1485,  900,  187,  188,  289, 1485,  995,
      287,  288,  994,  900,  780,  780,  900, 1485,  780, 1485,
     1183,  996,  900,  900, 1177, 1485,  900,  780,  997,  780,
      667, 1485,  373,  667, 1485,  900,  373,  900,  998,  999,
      667,  774, 1485,  667,  285, 1485,  774,  285, 1001,  667,
      350,  286,  667, 1485,  286,  350,  186,  831,  780,  780,

     1485,  287,  288, 1182,  287,  288,  900,  900,  900, 1485,
     1485,  900, 1041,  187,  188, 1485, 1180,  998,  998,  285,
     1485,  998,  285, 1485,  285, 1184,  286, 1485,  285,  286,
      998,  286,  998,  900,  900,  286,  287,  288,  186,  287,
      288,  287,  288, 1485, 1185,  287,  288,  667, 1485,  407,
      667, 1485,  285,  407,  580,  187,  188,  285, 1186,  286,
      463,  998,  998,  667,  286, 1485,  667, 1485, 1485,  287,
      288,  777,  667,  667,  287,  288,  667,  285,  778,  285,
     1485, 1485, 1485,  580,  286,  667,  286,  667,  780,  781,
     1188,  285, 1485,  285,  287,  288,  287,  288,  286, 1485,

      286, 1187, 1485,  580, 1485, 1485, 1485,  285,  287,  288,
      287,  288, 1485,  285,  286,  285,  667,  667, 1485,  186,
      286,  285,  286, 1189,  287,  288, 1191,  285,  286, 1190,
      287,  288,  287,  288,  286,  285,  187,  188,  287,  288,
      285, 1485,  286, 1195,  287,  288, 1192,  286, 1193,  285,
     1485, 1485,  287,  288, 1194, 1255,  286,  287,  288, 1485,
     1485,  285, 1485,  285, 1485, 1485,  287,  288,  286, 1485,
      286, 1485, 1485, 1196, 1485, 1485,  285, 1485,  287,  288,
      287,  288, 1198,  286,  285, 1485, 1197, 1485,  285, 1485,
      285,  286,  285,  287,  288,  286, 1485,  286,  186,  286,

     1485,  287,  288, 1485, 1485,  287,  288,  287,  288,  287,
      288,  285, 1485,  285, 1199,  187,  188, 1200,  286, 1485,
      286, 1485, 1203, 1202, 1485,  285, 1201, 1485,  287,  288,
      287,  288,  286, 1204, 1205, 1256, 1485,  285, 1485,  285,
     1485, 1485,  287,  288,  286,  285,  286,  186, 1485, 1485,
     1485, 1485,  286,  285,  287,  288,  287,  288, 1206,  285,
      286,  186,  287,  288,  187,  188,  286,  285, 1207, 1485,
      287,  288, 1209, 1485,  286, 1485,  287,  288,  187,  188,
      900,  350, 1208,  900,  287,  288,  350, 1485, 1042, 1485,
      186, 1485, 1485, 1211, 1485, 1210,  900,  835,  835,  900,

     1257,  835, 1485, 1213, 1043,  900,  900,  187,  188,  900,
      835, 1044,  835,  900, 1485,  189,  900, 1264,  900,  189,
      900, 1045, 1046,  667,  829, 1485,  667,  346, 1485,  829,
      369, 1048,  667,  373,  347,  667, 1485,  370,  373, 1485,
      844,  835,  835, 1485,  348,  349, 1218,  371,  372,  900,
      900,  900,  848,  848,  900, 1053,  848, 1227, 1485, 1043,
      900,  900,  346, 1485,  900,  848, 1044,  848, 1485,  347,
     1485,  369, 1485,  900, 1485,  900, 1045, 1046,  370,  348,
      349, 1485, 1485, 1485,  900,  373, 1485,  900,  371,  372,
      373, 1485, 1054,  369, 1485,  369,  848,  848, 1219, 1485,

      370, 1485,  370,  628,  900,  900,  900, 1221, 1485,  900,
      371,  372,  371,  372, 1216, 1045, 1045,  667,  842, 1045,
      667, 1485, 1485,  842,  186, 1060, 1485,  369, 1045, 1230,
     1045,  900,  900, 1228,  370, 1485,  369, 1485, 1485,  369,
     1226,  187,  188,  370,  371,  372,  370, 1260,  369, 1485,
      186, 1485, 1229,  371,  372,  370,  371,  372, 1485, 1045,
     1045,  667, 1485, 1485,  667,  371,  372,  187,  188,  832,
      667,  667,  628,  369,  667,  369,  833,  628, 1485, 1485,
      370, 1231,  370,  667, 1485,  667,  835,  836,  369, 1266,
      371,  372,  371,  372,  369,  370,  667, 1485,  665,  667,

     1232,  370,  665,  369, 1485,  371,  372, 1235, 1485, 1485,
      370,  371,  372, 1233,  667,  667,  900, 1485, 1485,  900,
      371,  372, 1485, 1485, 1055,  900,  900,  369, 1234,  900,
      369, 1056,  628,  186,  370, 1485,  369,  370,  900, 1485,
      900, 1057, 1058,  370,  371,  372, 1485,  371,  372,  369,
      187,  188, 1485,  371,  372,  369,  370, 1485, 1237,  186,
     1270, 1485,  370, 1236, 1485,  628,  371,  372, 1238,  900,
      900,  900,  371,  372,  900, 1485,  187,  188, 1239, 1055,
      900,  900,  667,  407,  900,  667, 1056, 1485,  407, 1485,
      873,  186, 1258,  900,  186,  900, 1057, 1058,  900,  407,

      403,  900, 1485, 1485,  407, 1081, 1082,  404,  187,  188,
     1485,  187,  188, 1485, 1485,  877,  877,  405,  406,  877,
      403, 1241, 1247, 1259,  900,  900,  900,  404,  877,  900,
      877, 1485, 1271, 1485, 1224, 1057, 1057,  405,  406, 1057,
      186,  667,  871, 1485,  667, 1485,  881,  871, 1057, 1088,
     1057,  900,  900, 1485,  403, 1485,  403,  187,  188,  877,
      877,  404, 1485,  404, 1246, 1485, 1485, 1485, 1485,  403,
     1263,  405,  406,  405,  406, 1250,  404, 1485, 1485, 1057,
     1057,  667,  881, 1485,  667, 1485,  405,  406, 1485,  845,
      667,  667,  403, 1485,  667,  881,  846,  403, 1485,  404,

      186, 1485, 1485,  667,  404,  667,  848,  849, 1485,  405,
      406, 1248, 1485,  403,  405,  406, 1485,  187,  188, 1249,
      404, 1485, 1485, 1261, 1485,  186, 1485, 1485, 1100, 1100,
      405,  406, 1485, 1485,  667,  667,  900, 1485,  186,  900,
     1485, 1485,  187,  188, 1083,  900,  900,  403, 1262,  900,
      415, 1084,  403, 1485,  404,  187,  188, 1102,  900,  404,
      900, 1085, 1086, 1102,  405,  406, 1251, 1485,  186,  405,
      406, 1485, 1100, 1100,  900,  189, 1485,  900, 1485, 1485,
      189, 1485,  901,  903,  903,  187,  188,  903, 1252,  900,
      900,  900, 1485, 1485,  900, 1485,  903, 1106,  903, 1083,

      900,  900,  900,  665,  900,  900, 1084, 1485,  665, 1485,
     1108, 1485,  186,  900,  186,  900, 1085, 1086,  667,  665,
      186,  667,  186, 1485,  665, 1254,  906,  903,  903,  187,
      188,  187,  188, 1485, 1485, 1267, 1485,  187,  188,  187,
      188, 1111, 1485, 1268,  900,  900,  900,  186, 1485,  900,
     1269, 1485, 1265, 1485, 1244, 1085, 1085,  186, 1485, 1085,
      186, 1485, 1485, 1485,  187,  188, 1485,  186, 1085,  186,
     1085,  900,  900, 1485,  187,  188,  186,  187,  188, 1274,
     1272, 1485, 1485, 1273,  187,  188,  187,  188, 1485, 1485,
      186, 1485, 1276,  187,  188, 1485, 1485, 1485, 1485, 1085,

     1085,  667, 1485, 1485,  667, 1275, 1485,  187,  188,  874,
      667,  667, 1277,  186,  667,  186,  875,  186, 1485, 1485,
     1278,  186, 1485,  667,  186,  667,  877,  878, 1279, 1485,
      187,  188,  187,  188,  187,  188, 1280, 1485,  187,  188,
     1485,  187,  188, 1485,  186, 1485, 1485, 1281, 1485, 1485,
     1485, 1485, 1485,  186,  667,  667,  900,  186, 1282,  900,
     1485,  187,  188, 1485,  902,  900,  900, 1283,  186,  900,
      187,  188,  186, 1485,  187,  188,  186, 1485,  900,  186,
      900,  903,  904,  186, 1284,  187,  188,  186, 1485,  187,
      188, 1485, 1485,  187,  188, 1485,  187,  188, 1285,  186,

      187,  188, 1287, 1485,  187,  188, 1289,  186, 1485,  900,
      900, 1485,  186, 1286,  186, 1485,  187,  188,  186, 1485,
      186, 1288,  186, 1485,  187,  188,  186, 1485, 1290,  187,
      188,  187,  188,  186, 1485,  187,  188,  187,  188,  187,
      188, 1291,  186,  187,  188, 1292,  186, 1485,  186, 1485,
      187,  188,  186, 1485,  186, 1485, 1293,  186, 1485,  187,
      188,  186, 1485,  187,  188,  187,  188, 1485,  186,  187,
      188,  187,  188, 1485,  187,  188,  186, 1485,  187,  188,
     1294, 1485, 1485,  186, 1485,  187,  188,  186, 1485, 1485,
     1295, 1298, 1485,  187,  188, 1485, 1485, 1296, 1485, 1297,

      187,  188, 1485, 1485,  187,  188, 1485,  900,  289, 1485,
      900, 1485, 1299,  289, 1485,  995, 1485, 1485, 1485, 1300,
      900, 1485,  289,  900,  998,  998,  289, 1485,  998, 1485,
     1177, 1485,  900,  774, 1485,  900, 1485,  998,  774,  998,
     1179,  667,  774, 1485,  667,  186, 1485,  774, 1485, 1001,
      667, 1485,  774,  667,  285, 1302,  774, 1485,  285, 1485,
     1485,  286,  187,  188, 1182,  286, 1485, 1485,  998,  998,
      900,  287,  288,  900, 1485,  287,  288, 1303,  996,  900,
      900,  285, 1485,  900,  285,  997, 1485,  186,  286, 1485,
      285,  286,  900, 1305,  900,  998,  999,  286,  287,  288,

     1304,  287,  288,  285,  187,  188, 1485,  287,  288,  285,
      286, 1307, 1485, 1485, 1485,  285,  286, 1485,  285, 1485,
      287,  288,  286,  900,  900,  286,  287,  288, 1350, 1306,
      285, 1485,  287,  288,  285,  287,  288,  286, 1485, 1485,
     1485,  286, 1485,  285, 1485, 1485,  285,  287,  288,  186,
      286,  287,  288,  286, 1485, 1485, 1308, 1485,  285, 1309,
      287,  288,  285,  287,  288,  286,  187,  188, 1485,  286,
      285, 1485, 1310, 1312, 1485,  287,  288,  286, 1485,  287,
      288, 1311,  285, 1485,  285, 1313, 1485,  287,  288,  286,
      285,  286, 1485, 1314, 1485, 1485, 1315,  286,  285,  287,

      288,  287,  288,  285, 1485,  286, 1485,  287,  288, 1485,
      286, 1485,  285, 1316, 1485,  287,  288, 1485, 1485,  286,
      287,  288, 1485, 1485,  285, 1485,  285, 1485, 1485,  287,
      288,  286,  285,  286, 1317, 1318, 1485, 1485, 1485,  286,
     1485,  287,  288,  287,  288, 1485,  285, 1485,  285,  287,
      288,  285, 1485,  286,  285,  286, 1320, 1321,  286, 1485,
      346,  286, 1319,  287,  288,  287,  288,  347,  287,  288,
     1485,  287,  288,  900,  350, 1485,  900,  348,  349,  350,
     1485, 1042, 1485, 1485, 1485, 1322, 1485, 1324, 1485, 1323,
     1485,  900, 1485,  350,  900, 1485, 1213,  350, 1045, 1045,

      900,  829, 1045,  900,  667,  829,  829,  667, 1215, 1485,
      829, 1045, 1048, 1045,  667, 1485,  829,  667,  900,  373,
      829,  900,  186, 1326,  373, 1485, 1054, 1218,  900, 1485,
      373,  900, 1057, 1057,  373, 1485, 1057, 1485, 1485,  187,
      188, 1221, 1045, 1045, 1485, 1057, 1485, 1057,  900,  842,
     1485,  900,  667,  842,  842,  667, 1223, 1485,  842, 1485,
     1060,  667, 1485,  842,  667,  369, 1485,  842, 1485, 1485,
     1485, 1328,  370,  369, 1485, 1226, 1057, 1057,  369, 1485,
      370,  369,  371,  372, 1329,  370,  369, 1485,  370,  186,
      371,  372, 1330,  370,  369,  371,  372, 1485,  371,  372,

     1485,  370, 1485,  371,  372, 1485,  187,  188,  369, 1485,
     1485,  371,  372, 1485, 1485,  370,  369, 1331, 1485, 1485,
     1332, 1485, 1485,  370, 1333,  371,  372, 1349,  369, 1485,
     1485, 1335, 1334,  371,  372,  370,  369, 1485,  186,  628,
      369, 1485,  369,  370,  369,  371,  372,  370, 1485,  370,
     1485,  370, 1485,  371,  372,  187,  188,  371,  372,  371,
      372,  371,  372, 1338, 1485, 1485, 1336, 1339, 1485, 1485,
      900,  407, 1337,  900,  628, 1485,  407, 1485, 1082,  900,
     1485,  407,  900, 1085, 1085,  407,  186, 1085, 1485,  900,
      871, 1485,  900, 1241, 1485,  871, 1085, 1243, 1085,  667,

      871, 1485,  667,  187,  188,  871,  403, 1088,  667, 1485,
      871,  667, 1341,  404,  871, 1485, 1485, 1485,  403, 1353,
     1485, 1485, 1246,  405,  406,  404,  186, 1085, 1085, 1485,
      403, 1485,  403, 1342,  403,  405,  406,  404, 1485,  404,
     1485,  404, 1485,  187,  188, 1485,  403,  405,  406,  405,
      406,  405,  406,  404, 1485, 1485, 1343, 1344, 1352,  900,
      665, 1485,  900,  405,  406,  665, 1485, 1108,  186, 1485,
     1345, 1346,  900, 1485,  665,  900,  186, 1485,  665,  186,
     1485,  186, 1254,  186, 1347,  187,  188, 1485,  186, 1485,
      186, 1485,  186,  187,  188, 1348,  187,  188,  187,  188,

      187,  188,  186, 1485, 1355,  187,  188,  187,  188,  187,
      188, 1112, 1351, 1357,  186, 1485,  186, 1354,  186,  187,
      188, 1485,  186, 1485, 1485, 1359, 1356, 1485, 1485,  186,
     1358,  187,  188,  187,  188,  187,  188,  186, 1360,  187,
      188, 1361,  186, 1485,  186, 1362,  187,  188, 1485, 1485,
     1485,  186, 1485,  186,  187,  188, 1485, 1485, 1485,  187,
      188,  187,  188,  186, 1485, 1363,  186, 1365,  187,  188,
      187,  188,  186, 1364,  186, 1366,  186, 1485,  186, 1485,
      187,  188, 1485,  187,  188,  186, 1485,  186, 1485,  187,
      188,  187,  188,  187,  188,  187,  188, 1368, 1485, 1369,

     1485,  186,  187,  188,  187,  188, 1485, 1485,  186, 1485,
      186, 1485,  186, 1485,  186, 1485, 1367, 1370,  187,  188,
     1485,  186, 1485,  186, 1371,  187,  188,  187,  188,  187,
      188,  187,  188,  186, 1485,  186, 1485, 1373,  187,  188,
      187,  188, 1485, 1485,  186, 1485, 1372,  186, 1485, 1485,
      187,  188,  187,  188, 1485, 1485, 1485, 1485, 1485, 1485,
     1374,  187,  188, 1485,  187,  188,  900,  774,  285,  900,
     1375, 1485,  774, 1485, 1179,  286, 1485, 1376, 1485, 1485,
     1377,  900, 1485,  774,  900,  287,  288,  774, 1485, 1302,
      285, 1485, 1485,  285, 1485,  285, 1485,  286, 1485, 1485,

      286, 1485,  286, 1485, 1485,  186, 1378,  287,  288, 1485,
      287,  288,  287,  288,  285, 1485, 1381,  285, 1485,  285,
     1485,  286,  187,  188,  286,  186,  286, 1485, 1379, 1380,
     1485,  287,  288, 1485,  287,  288,  287,  288,  285, 1485,
     1383,  285,  187,  188, 1485,  286, 1382,  285,  286, 1485,
      285, 1485, 1485,  285,  286,  287,  288,  286,  287,  288,
      286, 1384, 1485, 1412,  287,  288, 1485,  287,  288,  285,
      287,  288, 1387,  285, 1485,  285,  286, 1485,  285, 1386,
      286, 1485,  286, 1485, 1385,  286,  287,  288, 1388, 1485,
      287,  288,  287,  288,  285,  287,  288,  285, 1485,  285,

     1485,  286, 1485, 1485,  286,  186,  286, 1485, 1485, 1389,
     1390,  287,  288,  285,  287,  288,  287,  288,  285, 1485,
      286, 1391,  187,  188, 1485,  286,  285, 1485, 1409, 1485,
      287,  288, 1485,  286, 1485,  287,  288, 1485, 1485, 1485,
      369, 1485, 1392,  287,  288,  900,  829,  370,  900, 1485,
     1393,  829, 1485, 1215, 1485, 1394, 1485,  371,  372, 1395,
      900, 1485,  829,  900,  900,  842,  829,  900, 1326, 1485,
      842, 1485, 1223,  900, 1485,  842,  900,  369, 1396,  842,
     1485,  369, 1485,  369,  370,  369, 1485, 1328,  370,  369,
      370, 1485,  370, 1485,  371,  372,  370, 1485,  371,  372,

      371,  372,  371,  372, 1399,  369,  371,  372, 1400, 1485,
     1485,  369,  370, 1485, 1485, 1397, 1485, 1398,  370,  369,
     1485,  186,  371,  372,  369, 1485,  370,  628,  371,  372,
      628,  370, 1401,  369, 1485, 1485,  371,  372,  187,  188,
      370,  371,  372, 1485, 1410, 1485,  900,  871,  403,  900,
      371,  372,  871, 1402, 1243,  404, 1403,  900, 1485,  871,
      900,  403, 1485,  871,  403,  405,  406, 1485,  404, 1341,
      403,  404, 1485, 1485, 1485, 1485,  628,  404,  405,  406,
     1404,  405,  406,  403, 1405,  403, 1485,  405,  406,  186,
      404,  186,  404,  186, 1485,  186, 1406, 1407,  186, 1485,

      405,  406,  405,  406, 1485, 1485,  187,  188,  187,  188,
      187,  188,  187,  188,  186,  187,  188,  186, 1485, 1485,
     1408, 1411,  415, 1413,  186, 1485,  186, 1485,  186, 1485,
     1414,  187,  188, 1485,  187,  188, 1415,  186, 1485,  186,
     1416,  187,  188,  187,  188,  187,  188,  186, 1485,  186,
     1417, 1485,  186, 1485,  187,  188,  187,  188, 1419,  186,
     1485,  186, 1485, 1485,  187,  188,  187,  188, 1420,  187,
      188,  186, 1485,  186, 1485, 1485,  187,  188,  187,  188,
     1418, 1485, 1421,  186, 1485,  186, 1485,  186,  187,  188,
      187,  188,  186, 1423,  186, 1485,  186, 1485, 1422,  186,

      187,  188,  187,  188,  187,  188, 1425, 1485,  285,  187,
      188,  187,  188,  187,  188,  286,  187,  188, 1485, 1485,
     1424,  285, 1485, 1485,  285,  287,  288,  285,  286,  285,
     1426,  286, 1485, 1485,  286, 1429,  286, 1427,  287,  288,
     1428,  287,  288, 1431,  287,  288,  287,  288, 1430,  285,
     1485,  285, 1485, 1485,  315, 1485,  286,  285,  286, 1485,
     1485, 1485, 1485,  285,  286, 1432,  287,  288,  287,  288,
      286, 1433,  285,  576,  287,  288, 1485,  285, 1485,  286,
      287,  288,  315, 1434,  286,  285, 1485, 1485, 1485,  287,
      288,  285,  286, 1485,  287,  288, 1485,  285,  286,  285,

     1485,  186,  287,  288,  286,  186,  286, 1485,  287,  288,
     1485, 1435, 1436,  285,  287,  288,  287,  288,  187,  188,
      286,  285,  187,  188, 1485,  285, 1485,  369,  286, 1437,
      287,  288,  286,  369,  370,  186, 1438, 1485,  287,  288,
      370,  369,  287,  288,  371,  372, 1442, 1485,  370,  369,
      371,  372,  187,  188, 1439,  369,  370,  369,  371,  372,
     1440, 1485,  370,  369,  370,  628,  371,  372, 1441, 1485,
      370, 1485,  371,  372,  371,  372,  369, 1485,  403, 1485,
      371,  372, 1485,  370, 1446,  404, 1485, 1443, 1485, 1444,
      403, 1485,  403,  371,  372,  405,  406,  404,  403,  404,

     1485,  186, 1445,  415,  403,  404,  186,  405,  406,  405,
      406,  404, 1447, 1485,  186,  405,  406,  415,  187,  188,
     1485,  405,  406,  187,  188, 1485, 1485, 1449,  186, 1485,
     1448,  187,  188,  186, 1485,  186, 1485,  186, 1112,  186,
     1485, 1485, 1485,  946,  186,  187,  188,  186, 1485,  186,
      187,  188,  187,  188,  187,  188,  187,  188, 1485, 1451,
     1485,  187,  188,  186,  187,  188,  187,  188,  186, 1485,
      186, 1485, 1453,  186, 1485,  186, 1452,  186, 1450, 1485,
      187,  188, 1485, 1485, 1485,  187,  188,  187,  188, 1485,
      187,  188,  187,  188,  187,  188, 1454,  285, 1485,  285,

     1455, 1485,  285, 1485,  286,  285,  286, 1485, 1485,  286,
      186, 1485,  286,  186,  287,  288,  287,  288,  285,  287,
      288, 1485,  287,  288, 1460,  286,  285,  187,  188,  186,
      187,  188, 1485,  286,  285,  287,  288, 1456, 1459, 1457,
     1458,  286,  285,  287,  288, 1485,  187,  188, 1485,  286,
      285,  287,  288, 1485, 1485,  285, 1471,  286, 1485,  287,
      288, 1462,  286,  285, 1461, 1463, 1150,  287,  288,  369,
      286,  369,  287,  288, 1485,  315,  370,  369,  370, 1485,
      287,  288, 1485,  369,  370, 1485,  371,  372,  371,  372,
      370, 1485, 1464, 1485,  371,  372,  369, 1485, 1485, 1485,

      371,  372,  186,  370, 1485,  369, 1485, 1485, 1485, 1465,
      369, 1466,  370,  371,  372, 1467, 1468,  370,  403,  187,
      188, 1485,  371,  372, 1470,  404,  186,  371,  372, 1485,
      403, 1485, 1469,  628,  628,  405,  406,  404, 1485,  403,
     1472,  186, 1485,  187,  188,  285,  404,  405,  406, 1485,
     1485, 1485,  286, 1485,  285,  415,  405,  406,  187,  188,
     1485,  286,  287,  288,  186, 1485,  285, 1485, 1474, 1485,
     1485,  287,  288,  286, 1473, 1485,  415, 1475,  285, 1485,
      285,  187,  188,  287,  288,  286,  186,  286, 1485, 1485,
      186, 1485,  285, 1476,  285,  287,  288,  287,  288,  286,

     1477,  286, 1485,  187,  188, 1485,  285,  187,  188,  287,
      288,  287,  288,  286,  788, 1478, 1485, 1485,  285, 1485,
      369, 1485,  369,  287,  288,  286, 1485,  370, 1485,  370,
     1485, 1485, 1485, 1485,  369,  287,  288,  371,  372,  371,
      372,  370,  369,  628, 1485,  628,  369, 1485,  403,  370,
     1485,  371,  372,  370,  186,  404, 1485, 1485, 1485,  371,
      372, 1479,  285,  371,  372,  405,  406,  628, 1480,  286,
      285,  187,  188, 1485,  285, 1485,  285,  286,  628,  287,
      288,  286,  285,  286, 1485, 1485, 1481,  287,  288,  286,
     1485,  287,  288,  287,  288,  369, 1485,  403, 1485,  287,

      288, 1485,  370,  285,  404, 1485, 1485, 1482, 1485,  369,
      286, 1485,  371,  372,  405,  406,  370, 1485, 1485,  315,
      287,  288, 1485, 1485, 1485,  285,  371,  372, 1483, 1485,
     1485, 1485,  286, 1485, 1485, 1484, 1485, 1485, 1485, 1485,
      415,  628,  287,  288,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  185,

      185, 1485, 1485,  185,  185,  185,  189, 1485,  189,  189,
      189,  189,  189,  189,  189,  189,  284,  284, 1485, 1485,
      284,  284,  284,  289, 1485,  289,  289,  289,  289,  289,
      289,  289,  289,  345,  345, 1485, 1485,  345,  345,  345,
      350, 1485,  350,  350,  350,  350,  350,  350,  350,  350,
      368,  368, 1485, 1485,  368,  368,  368,  373, 1485,  373,
      373,  373,  373,  373,  373,  373,  373,  402,  402, 1485,
     1485,  402,  402,  402,  407, 1485,  407,  407,  407,  407,
      407,  407,  407,  407,  436, 1485, 1485, 1485,  436, 1485,
      436,  436, 1485,  436,  436,  440, 1485, 1485,  440,  440,

     1485,  440,  440,  440,  440,  440,  441,  441, 1485,  441,
      441,  441,  441,  441,  441,  441,  441,  442, 1485,  442,
      442, 1485, 1485,  442, 1485,  442,  448,  448,  448,  448,
      448, 1485,  448,  555,  555,  555,  555,  555, 1485,  555,
      604,  604,  604,  604,  604, 1485,  604,  616,  616,  616,
      616,  616, 1485,  616,  643,  643,  643,  643,  643, 1485,
      643,  665, 1485,  665,  665,  665,  665,  665,  665,  665,
      665,  668, 1485, 1485, 1485,  668,  668,  668,  668,  668,
      668,  668,  774, 1485,  774,  774,  774,  774,  774,  774,
      774,  774,  776, 1485, 1485, 1485,  776,  776,  776,  776,

      776,  776,  776,  829, 1485,  829,  829,  829,  829,  829,
      829,  829,  829,  831, 1485, 1485, 1485,  831,  831,  831,
      831,  831,  831,  831,  667, 1485, 1485, 1485,  667,  667,
      667,  667,  667,  667,  667,  842, 1485,  842,  842,  842,
      842,  842,  842,  842,  842,  844, 1485, 1485, 1485,  844,
      844,  844,  844,  844,  844,  844,  871, 1485,  871,  871,
      871,  871,  871,  871,  871,  871,  873, 1485, 1485, 1485,
      873,  873,  873,  873,  873,  873,  873,  898,  898, 1485,
      898,  898,  898,  898,  898,  898,  898,  898,  901, 1485,
     1485, 1485,  901,  901,  901,  901,  901,  901,  901,  906,

     1485, 1485, 1485,  906,  906,  906,  906,  906,  906,  906,
      993,  993, 1485,  993,  993,  993,  993,  993,  993,  993,
      993,  995, 1485, 1485, 1485,  995,  995,  995,  995,  995,
      995,  995, 1001, 1485, 1485, 1485, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1040, 1040, 1485, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1042, 1485, 1485, 1485, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1048, 1485, 1485, 1485, 1048,
     1048, 1048, 1048, 1048, 1048, 1048,  900, 1485, 1485, 1485,
      900,  900,  900,  900,  900,  900,  900, 1052, 1052, 1485,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1054, 1485,

     1485, 1485, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1060,
     1485, 1485, 1485, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1080, 1080, 1485, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1082, 1485, 1485, 1485, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1088, 1485, 1485, 1485, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1105, 1105, 1485, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1108, 1485, 1485, 1485, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1110, 1110, 1485, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1176, 1176, 1485, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1179, 1485, 1485,

     1485, 1179, 1179, 1179, 1179, 1179, 1179, 1179,  776, 1485,
     1485, 1485,  776,  776,  776,  776,  776,  776,  776, 1181,
     1181, 1485, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
      284,  284, 1485, 1485,  284,  284,  284, 1040, 1040, 1485,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1042, 1485,
     1485, 1485, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1212,
     1212, 1485, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1215, 1485, 1485, 1485, 1215, 1215, 1215, 1215, 1215, 1215,
     1215,  831, 1485, 1485, 1485,  831,  831,  831,  831,  831,
      831,  831, 1217, 1217, 1485, 1217, 1217, 1217, 1217, 1217,

     1217, 1217, 1217,  345,  345, 1485, 1485,  345,  345,  345,
     1052, 1052, 1485, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1054, 1485, 1485, 1485, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1220, 1220, 1485, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1223, 1485, 1485, 1485, 1223, 1223, 1223,
     1223, 1223, 1223, 1223,  844, 1485, 1485, 1485,  844,  844,
      844,  844,  844,  844,  844, 1225, 1225, 1485, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225,  368,  368, 1485, 1485,
      368,  368,  368, 1080, 1080, 1485, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1082, 1485, 1485, 1485, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1240, 1240, 1485, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1243, 1485, 1485, 1485,
     1243, 1243, 1243, 1243, 1243, 1243, 1243,  873, 1485, 1485,
     1485,  873,  873,  873,  873,  873,  873,  873, 1245, 1245,
     1485, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,  402,
      402, 1485, 1485,  402,  402,  402, 1105, 1105, 1485, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105,  900, 1485, 1485,
     1485,  900,  900,  900,  900,  900,  900,  900,  901, 1485,
     1485, 1485,  901,  901,  901,  901,  901,  901,  901, 1253,
     1253, 1485, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1110, 1110, 1485, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110,  185,  185, 1485, 1485,  185,  185,  185, 1176, 1176,
     1485, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,  995,
     1485, 1485, 1485,  995,  995,  995,  995,  995,  995,  995,
     1301, 1301, 1485, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1181, 1181, 1485, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  284,  284, 1485, 1485,  284,  284,  284, 1325,
     1325, 1485, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1327, 1327, 1485, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1340, 1340, 1485, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340,   23, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485
    } ;

static const flex_int16_t yy_chk[9761] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    7,    7,    7,    7,   19,   25,   19,
       19,    7,   25,   25,    7,    8,    8,    8,    8,    8,
        8,   20,  183,   20,   20,    8,  183,  183,    8,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   28,
       15,   15,   34,   15,   15,   15, 1104,   15,   16,   16,
     1085,   16,   16,   16,   29,   16,   28,   28,  671,   34,
       34,   13,   15,   13,  671,   13,  780,   13,   13,   29,
       16,   13,  780,   13,   13, 1057,   13,   13, 1045,   13,
       13,   17,   17,  998,   17,   17,   18,   18,   17,   18,
       18,   64,   31,   18,   21,   31,   21,   21,   21,   21,
       92,   33,   21,   21,   21,   35,   64,   33,   37,   31,
       31,  906,   36,  190,  190,   92,   46,   21,   33,   33,

       36,   36,   35,   35,  113,   37,   37,   38,   38,   36,
       36,   38,  903,   46,   46,  290,  290,  351,  351,  113,
       38,  897,   38,  142,  896,   39,  875,   21,   21,   46,
       21,   22,   40,   22,   22,   22,   22,  873,  142,   22,
       22,   22,   39,   39,   42,   39,  846,   39,  844,   40,
       40,   38,   38,  835,   22,   39,   43,  186,  168,  835,
      168,   42,   42,   39,  189,   40,  838,   42,   40,  374,
      374,   40,  186,   43,   43,  168,   45,   42,   54,  189,
      837,   42,  833,   42,   22,   22,   48,   22,   41,   43,
      831,   43,   43,   45,   45,   54,   54,   45,   43,   45,

      285,  408,  408,   48,   48,   41,   41,   41,  289,   47,
       41,   60,   45,   48,   41,  285,   49,   54,   41,   41,
      778,   41,   58,  289,   41,   44,   47,   47,   60,   60,
      185,  666,  666,   49,   49,   49,  346,   60,   60,   58,
       58,   47,   44,   44,  350,   47,   49,  185,  185,   49,
       50,  346,   44,   49,   58,   44,   44,   51,   44,  350,
      848,   44,  776,   44,   61,   44,  848,   50,   50,   50,
       50,  668,  369,   50,   51,   51,   51,   50,  664,  373,
       51,   61,   61,   50,   63,  403,   53,  369,  663,   61,
       51,   63,  407,   55,  373,   61,   51,   52,  449,  662,

      403,   63,   63,   53,   53,   53,  661,  407,  775,  775,
       55,   55,   55,  449,   52,   52,   55,   52,  556,   53,
      187,   52,   53,   55,  199,   53,  660,   53,   52,   52,
       52,   52,   55,  556,   57,   52,   56,  187,  187,   56,
       56,  199,  199,   56,  605,   59,  199,   56,   56,  195,
       56,   57,   57,   56,  659,   56,   56,   57,   67,  605,
       57,   57,   59,   59,   59,   67,  195,  195,   59,   59,
       57,   66,   59,   68,   66,   67,   67,  877,   66,   68,
       68,  615,  195,  877,   59,   68,   69,  617,   66,   66,
       68,   68,   71,   69,   70,  614,   69,   69,   73,   71,

      613,   70,  617,   69,   69,   73,   70,  201,  612,   71,
       71,   70,   70,   72,   72,   73,   73,   72,  644,  609,
       75,  830,  830,   78,  201,  201,   72,   75,   72,  665,
       78,  608,   76,  644,  201,   73,   73,   75,   75,   76,
       78,   78,   78,   78,  665,   77,   78,   75,  447,   76,
       76,  446,   77,   80,  774,  843,  843,   72,   72,   74,
       80,  445,   77,   77,   76,  829,   74,   76,   81,  774,
       80,   80,  444,   80,   76,   81,   74,   74,   77,  435,
      829,   77,   74,  434,  842,   81,   81,   81,  871,   74,
       74,   81,   74,   83,   74,   74,   74,   74,   79,  842,

       83,   82,  367,  871,  366,   79,  669,  669,   82,  669,
       83,   83,  669,   83,  669,   79,   79,  365,   82,   82,
       79,   82,   79,  364,   82,   84,  111,   83,  110,  669,
       79,   26,   84,   85,   23,   79,   79,   86,   82,   86,
       85,    0,   84,   84,  872,  872,   84,   86,   86,   86,
       85,   85,   86,   86,   86,   87,  883,   88,   84,   90,
       85,   84,   87,   85,   88,  883,   90,    0,    0,  883,
      883,   90,   87,   87,   88,   88,   90,   90,   87,   89,
        0,    0,   91,    0,   94,    0,   89,   94,   87,   91,
      191,   94,    0,  191,   88,  196,   89,   89,   89,   91,

       91,   94,   94,   95,    0,    0,    0,  191,  191,   95,
       95,    0,  196,  196,    0,  100,  100,    0,    0,  100,
       95,   95,   96,   96,   96,   96,   96,   96,  100,   96,
      100,   97,    0,    0,   98,  196,   96,   99,   97,   97,
       97,   98,    0,    0,   99,    0,   96,   96,   97,   97,
      101,   98,   98,    0,   99,   99,    0,  101,  102,  100,
      100,    0,  103,    0,  112,  102,  192,  101,  101,  103,
        0,  112,  192,  101,    0,  102,  102,    0,    0,  103,
      103,  112,  112,  192,  192,  102,  106,  106,  106,  106,
      106,  106,    0,    0,  103,    0,  106,    0,    0,  106,

      108,  108,  108,  108,  108,  108,    0,    0,  125,  125,
      108,    0,  125,  108,  109,  109,  109,  109,  109,  109,
        0,  125,  116,  125,  109,  116,  118,  109,  119,  116,
      120,    0,  118,  118,    0,  119,    0,  120,    0,  116,
      116,  120,  121,  118,  118,  119,  119,  120,  120,  121,
      124,    0,  125,  125,  121,  126,    0,  124,  127,  121,
      121,    0,  126,  128,    0,  127,    0,  124,  124,  203,
      128,  129,  126,  126,    0,  127,  127,  131,  129,    0,
      128,  128,    0,    0,  131,    0,  203,  203,  129,  129,
      128,  127,  126,  130,  131,  131,  127,    0,    0,  131,

      130,  131,  132,    0,  129,    0,  133,  129,    0,  132,
      130,  130,  130,  133,    0,  131,    0,    0,  200,  132,
      132,  132,    0,  133,  133,  132,    0,  134,    0,  133,
        0,  135,    0,  136,  134,  200,  200,    0,  135,  137,
      136,  200,    0,  133,  134,  134,  137,  134,  135,  135,
      136,  136,  135,    0,  138,    0,  137,  137,  141,    0,
      136,  138,    0,  143,  135,  141,  143,  135,    0,    0,
      143,  138,  138,  137,  209,  141,  141,  137,  144,    0,
      143,  143,  145,    0,  144,  144,  146,  138,    0,  145,
      198,  209,  209,  146,  209,  144,  144,  147,  147,  145,

      145,  147,  149,  146,  146,    0,  150,  198,  198,  149,
      147,  209,  147,  150,  151,    0,    0,    0,  152,  149,
      149,  151,    0,  150,  150,  152,  150,    0,  198,  150,
        0,  151,  151,    0,  149,  152,  152,  149,  152,  193,
        0,  147,  147,  148,  149,  153,  151,  193,  193,    0,
      148,  154,  153,    0,  197,    0,  193,  193,  154,    0,
      148,  148,  153,  153,    0,  153,  148,    0,  154,  154,
      155,  197,  197,  148,  148,    0,    0,  155,  148,  148,
      148,  197,  153,  156,  197,  154,  157,  155,  155,    0,
      156,    0,  158,  157,  210,    0,    0,    0,  159,  158,

      156,  156,    0,  157,  157,  159,  155,    0,  157,  158,
      158,  210,  210,  156,    0,  159,  159,  159,    0,  157,
      899,  899,  899,  899,  157,  157,  899,    0,    0,  158,
      160,  160,  160,  160,  160,  160,  188,  188,  188,    0,
      160,  188,    0,  160,  162,  162,  162,  162,  162,  162,
      188,    0,  188,    0,  162,  180,  180,  162,  163,  163,
      163,  163,  163,  163,    0,  194,  194,  180,  163,  194,
      202,  163,    0,    0,  180,  204,    0,    0,  194,  205,
      194,  188,  188,    0,  180,    0,  206,  202,  202,  207,
      180,  202,  204,  204,  208,    0,  205,  205,  204,  180,

      180,    0,  205,  206,  206,  211,  207,  207,  206,  194,
      194,  208,  208,  212,    0,  213,    0,  208,  214,  207,
      207,  207,  211,  211,    0,  215,    0,    0,  207,  216,
      212,  212,  213,  213,  217,  214,  214,    0,    0,  213,
      218,  211,  215,  215,  212,  219,  216,  216,  215,    0,
      216,  217,  217,  220,    0,  214,  222,  218,  218,  218,
        0,    0,  219,  219,  217, 1102, 1102,  216,  221,    0,
      220,  220,    0,  222,  222,  223,    0,  224,  219,  225,
        0,  226,  222,  220,    0,  221,  221,  227,    0,  220,
      229,  221,  223,  223,  224,  224,  225,  225,  226,  226,

      226,  221,    0,    0,  227,  227,  228,  229,  229, 1102,
     1102,  225,  230,    0,  223,  231,    0,  225,    0,  232,
      227,  233,    0,  228,  228,  234,  229,  228,  235,  230,
      230,  236,  231,  231,  237,  231,  232,  232,  233,  233,
      233,  238,  234,  234,  230,  235,  235,    0,  236,  236,
        0,  237,  237,  231,  233,  239,    0,  240,  238,  238,
        0,  241,    0,  242,    0,  237,  235,  243,  236,  244,
        0,  245,  239,  239,  240,  240,    0,  239,  241,  241,
      242,  242,    0,  238,  243,  243,  244,  244,  245,  245,
      246,    0,  239,  240,  247,  245,  248,  244,  243,  242,

      249,  247,  241,  250,    0,    0,    0,  246,  246,  251,
        0,  247,  247,  248,  248,  252,    0,  249,  249,    0,
      250,  250,  254,  246,  253,    0,  251,  251,    0,  250,
        0,    0,  252,  252,    0,    0,  255,  249,  256,  254,
      254,  253,  253,  257,    0,  251,  258,  251,    0,  252,
        0,  253,  259,  255,  255,  256,  256,  253,  255,  254,
      257,  257,  260,  258,  258,  256,    0,  261,  258,  259,
      259,  994,  994,  994,  994,    0,  262,  994,    0,  260,
      260,  257,  263,  258,  261,  261,  258,  258,    0,  259,
      264,    0,  260,  262,  262,  262,    0,    0,    0,  263,

      263,  265,    0,    0,  261,    0,  262,  264,  264,  266,
        0,    0,  267,    0,  262,  263,    0,    0,  265,  265,
      269,    0,    0,  264,  268,    0,  266,  266,    0,  267,
      267,  270,    0,    0,  265,  267,  271,  269,  269,  265,
      269,  268,  268,  268,  272,  266,  273,  268,  270,  270,
      268,  269,  274,  271,  271,  275, 1103, 1103,    0,  276,
      268,  272,  272,  273,  273,  273,  277,    0,  270,  274,
      274,  278,  275,  275,    0,  272,  276,  276,    0,  274,
      279,    0,    0,  277,  277,  280,  279,  281,  278,  278,
        0,  275,  283,    0,  278,  276,    0,  279,  279,  277,

     1103, 1103,  280,  280,  281,  281,  282,    0,  280,  283,
      283,  283,  282,  284,    0,  286,    0,    0,  280,  287,
      284,    0,  286,  282,  282,  281,  287,    0,  292,    0,
      284,  284,  286,  286,  292,  292,  287,  287,  288,  288,
      288,  291,    0,  288,  291,  292,  292,    0,  291,  293,
        0,    0,  288,  294,  288,  295,  293,  296,  291,  291,
      294,  298,  295,    0,  296,    0,  293,  293,  298,    0,
      294,  294,  295,  295,  296,  296,  297,  297,  298,  298,
      297,    0,    0,  288,  288,  299,    0,  300,    0,  297,
      301,  297,  299,  302,  300,    0,    0,  301,  298,  303,

      302,    0,  299,  299,  300,  300,  303,  301,  301,  301,
      302,  302,    0,  302,    0,    0,  303,  303,  304,    0,
      297,  297,  300,  299,    0,  304,  305,    0,    0,    0,
      303,  303,  306,  305,  307,  304,  304,    0,    0,  306,
      308,  307,  448,  305,  305,    0,  309,  308,  310,  306,
      306,  307,  307,  309,  306,  310,  305,  308,  308,  448,
      448,    0,  311,  309,  309,  310,  310,  307,  309,  311,
      312,    0,  452,    0,  313,    0,  314,  312,  308,  311,
      311,  313,    0,  314,    0,    0,  455,  312,  312,  452,
      452,  313,  313,  314,  314,  315,    0,    0,  316,    0,

      311,    0,  315,  455,  455,  316,  312,  313,  452,    0,
        0,  317,  315,  315,  314,  316,  316,  317,  317,  318,
        0,  317,    0,    0,  319,    0,  318,    0,  317,  317,
      316,  319,  320,    0,  317,    0,  318,  318,    0,  320,
      321,  319,  319,    0,  322,  319,    0,  321,  323,  320,
      320,  322,  324,    0,    0,  323,    0,  321,  321,  324,
        0,  322,  322,  321,  325,  323,  323,  327,  323,  324,
      324,  325,  328,    0,  327,    0,  324,  322,  326,  328,
      326,  325,  325,    0,  327,  327,  323,  326,  326,  328,
      328,  329,  327,  326,  326,    0,  330,  329,  329,  333,

      328,    0,    0,  330,  331,    0,  333,    0,  329,  329,
        0,  331,    0,  330,  330,    0,  333,  333,  332,    0,
      334,  331,  331,    0,  333,  332,  335,  334,  329,  330,
        0,    0,  336,  335,  331,  332,  332,  334,  334,  336,
      331,  332,    0,  335,  335,    0,  337,    0,  338,  336,
      336,  332,    0,  337,  339,  338, 1041, 1041, 1041, 1041,
      340,  339, 1041,  337,  337,  338,  338,  340,  336,  337,
        0,  339,  339,  341,  339,  342,    0,  340,  340,    0,
      341,  343,  342,    0,  338,    0,    0,  344,  343,    0,
      341,  341,  342,  342,  344,    0,  340,    0,  343,  343,

        0,  345,  342,  347,  344,  344,  348,    0,  345,    0,
      347,    0,    0,  348,    0,  360,    0,  343,  345,  345,
      347,  347,  360,  348,  348,  349,  349,  349,  352,    0,
      349,  352,  360,  360,    0,  352,  353,    0,    0,  349,
        0,  349,  353,  353,    0,  352,  352,  354,  354,  354,
      354,  354,  354,  353,  353,  356,    0,  354,    0,    0,
      354,    0,  356,  356,  356,  357,  357,  358,    0,  357,
      349,  349,  356,  356,  358,  359,    0,  453,  357,    0,
      357,    0,  359,    0,  358,  358,  361,  361,  361,  361,
      361,  361,  359,  359,  453,  453,  361,  358,    0,  361,

      368,    0,    0,    0,  453,  359,    0,  368,    0,  357,
      357,  363,  363,  363,  363,  363,  363,  368,  368,  370,
        0,  363,  371,    0,  363,    0,  370,    0,    0,  371,
      372,  372,  372,    0,  454,  372,  370,  370,  375,  371,
      371,  375,  376,    0,  372,  375,  372,  377,  376,  376,
      378,  454,  454,  454,  377,  375,  375,  378,    0,  376,
      376,    0,    0,    0,  377,  377,    0,  378,  378,  379,
      379,  380,    0,  379,  381,  372,  372,  459,  380,  382,
        0,  381,  379,  383,  379,    0,  382,    0,  380,  380,
      383,  381,  381,    0,  459,  459,  382,  382,    0,    0,

      383,  383,  384,    0,    0,  381,  381,  459,  380,  384,
      385,    0,  382,  379,  379,  386,    0,  385,  388,  384,
      384,  383,  386,    0,  387,  388,    0,  385,  385,    0,
        0,  387,  386,  386,  387,  388,  388,  389,  384,  390,
        0,  387,  387,  385,  389,  391,  390,  387,    0,    0,
        0,    0,  391,  386,  389,  389,  390,  390,  392,    0,
      389,  393,  391,  391,  394,  392,  395,    0,  393,  391,
        0,  394,    0,  395,    0,  392,  392,  390,  393,  393,
      396,  394,  394,  395,  395,    0,  393,  396,    0,  392,
        0,  880,  394,    0,  397,  392,  392,  396,  396,  395,

      880,  397,  398,    0,  880,  880,  399,  880,  400,  398,
      396,  397,  397,  399,  401,  400,    0,  397,    0,  398,
      398,  401,    0,  399,  399,  400,  400,  398,  402,  399,
      404,  401,  401,  405,    0,  402,    0,  404,    0,    0,
      405,    0,  412,    0,  400,  402,  402,  404,  404,  412,
      405,  405,  406,  406,  406,  409,    0,  406,  409,  412,
      412,    0,  409,  410,    0,    0,  406,    0,  406,  410,
      410,    0,  409,  409,  411,  411,  413,  412,  411,    0,
      410,  410,    0,  413,  414,    0,    0,  411,    0,  411,
      460,  414,  415,  413,  413,  413,  416,  406,  406,  415,

        0,  414,  414,  416,  414,  417,    0,  460,  460,  415,
      415,    0,  417,  416,  416,    0,  460,  418,  411,  411,
        0,    0,  417,  417,  418,  419,  416,  417,    0,  420,
        0,  421,  419,  422,  418,  418,  420,  423,  421,  418,
      422,    0,  419,  419,  423,    0,  420,  420,  421,  421,
      422,  422,  421,  424,  423,  423,    0,    0,  425,    0,
      424,  420,  423,  419,  882,  425,  422,  426,    0,    0,
      424,  424,    0,  882,  426,  425,  425,  882,  882,  427,
      882,  428,    0,    0,  426,  426,  427,  429,  428,  456,
      424,  425,    0,  430,  429,  457,  427,  427,  428,  428,

      430,  428,    0,  426,  429,  429,  456,  456,    0,    0,
      430,  430,  457,  457,  429,  427,    0,  431,  431,  431,
      431,  431,  431,    0,    0,  456,    0,  431,    0,  430,
      431,  433,  433,  433,  433,  433,  433,    0,  457,    0,
        0,  433,  458,    0,  433,  450,  463,    0,  450,    0,
        0,    0,    0,  450,  450,  450,  461,    0,  450,  458,
      458,  458,  462,  463,  463,  450,  468,  450,  464,  450,
      450,  450,  471,  461,  461,  469,    0,  461,    0,  462,
      462,  462,    0,  468,  468,  464,  464,  465,  468,  471,
      471,    0,  469,  469,  466,  471,    0,    0,  450,  450,

      451,  464,    0,  451,  465,  465,    0,  465,  451,  451,
      451,  466,  466,  451,  469,  466,  466,  467,  465,  470,
      451,  465,  451,  472,  451,  451,  451,  473,    0,  474,
        0,  466,  466,  475,  467,  467,  470,  470,  476,    0,
      472,  472,  470,  477,  473,  473,  474,  474,    0,  467,
      475,  475,  478,  451,  451,  476,  476,  472,  470,  479,
      477,  477,  480,    0,  481,    0,  477,    0,  476,  478,
      478,  482,    0,    0,  475,  483,  479,  479,  484,  480,
      480,  481,  481,    0,  480,    0,  481,  487,  482,  482,
      478,  486,  483,  483,  485,  484,  484,  479,    0,    0,

      485,  488,  482,  489,  487,  487,  490,    0,  486,  486,
      484,  485,  485,    0,  486,    0,  483,    0,  488,  488,
      489,  489,  491,  490,  490,  492,    0,    0,    0,    0,
        0,  493,  489,  494,    0,  488,  490,    0,    0,  491,
      491,  495,  492,  492,  496,  491,    0,  492,  493,  493,
      494,  494,  497,    0,  493,    0,  494,  498,  495,  495,
        0,  496,  496,  495,  499,    0,  500,    0,  501,  497,
      497,  502,    0,  497,  498,  498,  503,    0,  496,    0,
        0,  499,  499,  500,  500,  501,  501,  504,  502,  502,
      500,    0,    0,  503,  503,    0,  505,  499,  506,    0,

        0,    0,    0,  507,  504,  504,  508,  501,  509,  502,
      507,    0,  503,  505,  505,  506,  506,  504,  506,  510,
      507,  507,  511,  508,  508,  509,  509,  505,  508,  512,
        0,  513,    0,  514,    0,    0,  510,  510,    0,  511,
      511,    0,    0,  515,    0,  511,  512,  512,  513,  513,
      514,  514,  516,  513,  517,  512,  518,    0,  519,  511,
      515,  515,  520,    0,  515,  514,  521,  515,    0,  516,
      516,  517,  517,  518,  518,  519,  519,    0,  516,  520,
      520,  515,    0,  521,  521,  519,  522,    0,    0,  523,
        0,    0,    0,  524,  518,  525,    0,  526,    0,  521,

        0,  520,  527,  522,  522,  521,  523,  523,    0,  522,
      524,  524,  525,  525,  526,  526,  528,    0,  525,  527,
      527,    0,    0,  529,    0,  523,  530,    0,  531,    0,
        0,  532,    0,  528,  528,    0,    0,  534,  527,  528,
      529,  529,  535,  530,  530,  531,  531,  531,  532,  532,
        0,  533,    0,  532,  534,  534,  536,  533,    0,  535,
      535,  537,    0,  538,  535,    0,    0,  530,  533,  533,
      539,    0,  540,  536,  536,  534,    0,    0,  537,  537,
      538,  538,  538,  535,  541,    0,    0,  539,  539,  540,
      540,  542,    0,  544,  536,  537,    0,    0,  543,    0,

        0,  541,  541,  540,    0,    0,  545,  539,  542,  542,
      544,  544,  546,    0,  542,  543,  543,  544,  542,  543,
      547,    0,  541,  545,  545,    0,    0,  548,    0,  546,
      546,  549,  546,  545,  550,    0,  551,  547,  547,  552,
        0,  553,    0,  545,  548,  548,    0,    0,  549,  549,
      547,  550,  550,  551,  551,    0,  552,  552,  553,  553,
      554,    0,  555,  549,  559,  552,  551,  560,  548,  555,
      550,  559,  677,  553,  560,    0,  561,  554,  554,  555,
      555,  559,  559,  561,  560,  560,    0,    0,  562,  677,
      677,    0,    0,  561,  561,  562,    0,  559,  554,  557,

        0,    0,  557,  560,    0,  562,  562,  557,  557,  557,
      563,    0,  557,  561,  557,    0,  564,  563,  564,  557,
        0,  557,  565,  557,  557,  557,  564,  563,  563,  565,
      566,  564,  564,    0,    0,    0,    0,  566,  576,  565,
      565,  563,    0,  568,    0,  576,    0,  566,  566,    0,
      568,    0,  557,  557,  558,  576,  576,  558,    0,    0,
      568,  568,  558,  558,  558,  567,    0,  558,    0,  558,
        0,  673,  567,    0,  558,  569,  558,  569,  558,  558,
      558,  568,  567,  567,  569,  569,  569,  570,  673,  673,
      569,  569,    0,  569,  570,  571,    0,    0,    0,  572,

        0,  567,  571,  674,  570,  570,  572,  558,  558,  673,
      570,  573,  571,  571,    0,  574,  572,  572,  573,    0,
      674,  674,  574,    0,  575,    0,  571,  577,  573,  573,
      572,  575,  574,  574,  577,    0,    0,  573,  574,  578,
      674,  575,  575,  572,  577,  577,  578,  579,    0,    0,
      575,    0,    0,  580,  579,  581,  578,  578,  577,  577,
      580,    0,  581,    0,  579,  579,    0,  582,    0,  578,
      580,  580,  581,  581,  582,  583,    0,    0,  581,  584,
        0,  585,  583,  579,  582,  582,  584,  586,  585,    0,
      582,    0,  583,  583,  586,    0,  584,  584,  585,  585,

        0,    0,  587,    0,  586,  586,  586,  588,    0,  587,
      589,    0,  584,  583,  588,  590,    0,  589,  585,  587,
      587,    0,  590,    0,  588,  588,    0,  589,  589,    0,
      588,  591,  590,  590,  592,    0,  589,  593,  591,  587,
      594,  592,    0,    0,  593,    0,    0,  594,  591,  591,
      682,  592,  592,  595,  593,  593,  675,  594,  594,    0,
      595,  594,  596,  591,    0,  597,    0,  682,  682,  596,
      595,  595,  597,  675,  675,  593,    0,  592,  598,  596,
      596,    0,  597,  597,    0,  598,  682,  599,  596,    0,
      600,  595,    0,  675,  599,  598,  598,  600,  676,  598,

        0,    0,  601,  597,  599,  599,  599,  600,  600,  601,
        0,  600,    0,    0,  602,  676,  676,  603,    0,  601,
      601,  602,  604,    0,  603,  676,    0,  600,    0,  604,
      610,  602,  602,  601,  603,  603,    0,  610,    0,  604,
      604,    0,  693,    0,  611,    0,  602,  610,  610,  610,
        0,  611,    0,    0,  603,  606,    0,    0,  606,  693,
      693,  611,  611,  606,  606,  606,  616,  693,  606,  620,
      606,  623,    0,  616,  678,  606,  620,  606,  623,  606,
      606,  606,  611,  616,  616,    0,  620,  620,  623,  623,
        0,  678,  678,    0,  626,    0,    0,  621,    0,  624,

        0,  626,  620,  678,  621,    0,  624,  623,  606,  606,
      607,  626,  626,  607,  621,  621,  624,  624,  607,  607,
      607,    0,  622,  607,  625,  607,  627,    0,  621,  622,
      607,  625,  607,  627,  607,  607,  607,  624,  626,  622,
      622,  625,  625,  627,  627,    0,  622,    0,    0,  628,
        0,    0,  627,    0,  631,  625,  628,    0,    0,  622,
        0,  631,    0,  607,  607,  618,  628,  628,  618,    0,
        0,  631,  631,  618,  618,  618,  629,  631,  618,  630,
      618,    0,    0,  629,  681,  618,  630,  618,  632,  618,
      618,  618,  633,  629,  629,  632,  630,  630,    0,  633,

        0,  681,  681,    0,  634,  632,  632,  629,  629,  633,
      633,  634,    0,  681,    0,  630,    0,    0,  618,  618,
      619,  634,  634,  619,    0,  633,  632,    0,  619,  619,
      619,  635,    0,  619,    0,  619,  636,    0,  635,  680,
      619,  634,  619,  636,  619,  619,  619,  679,  635,  635,
      635,  637,    0,  636,  636,    0,  680,  680,  637,  636,
      638,    0,  680,  639,  679,  679,    0,  638,  637,  637,
      639,    0,  640,  619,  619,  641,    0,  638,  638,  640,
      639,  639,  641,  637,  639,  679,    0,  642,    0,  640,
      640,    0,  641,  641,  642,  643,  641,    0,  640,    0,

        0,  684,  643,  638,  642,  642,  642,    0,  647,    0,
        0,    0,  643,  643,  645,  647,    0,  645,  684,  684,
        0,    0,  645,  645,  645,  647,  647,  645,  684,  645,
      649,    0,    0,    0,  645,    0,  645,  649,  645,  645,
      645,    0,  650,    0,  651,  647,    0,  649,  649,  650,
        0,  651,    0,  649,    0,    0,    0,    0,  688,  650,
      650,  651,  651,  652,    0,  650,    0,  645,  645,  646,
      652,    0,  646,    0,  651,  688,  688,  646,  646,  646,
      652,  652,  646,    0,  646,  688,    0,  685,    0,  646,
      653,  646,  654,  646,  646,  646,  655,  653,    0,  654,

      652,    0,    0,  655,  685,  685,  685,  653,  653,  654,
      654,    0,    0,  655,  655,  655,    0,    0,    0,  656,
        0,    0,  646,  646,  648,    0,  656,  657,  653,  683,
      654,  648,  658,    0,  657,  687,  656,  656,    0,  658,
      656,  648,  648,    0,  657,  657,  683,  683,  648,  658,
      658,    0,  687,  687,  686,  648,  656,  648,  687,  657,
        0,  648,  648,    0,  648,  683,    0,  689,    0,  658,
      670,  686,  686,  670,    0,    0,    0,    0,  670,  670,
      670,  686,  690,  670,  689,  689,  694,  686,    0,  691,
        0,    0,  670,  692,  670,  670,  670,  695,    0,  690,

      690,  696,    0,  694,  694,  689,  691,  691,    0,  690,
      692,  692,  697,    0,  695,  695,  694,    0,  696,  696,
        0,    0,  695,  670,  670,  672,  698,  691,  672,  697,
      697,    0,  692,  672,  672,  672,  699,    0,  672,  700,
        0,  701,  696,  698,  698,    0,    0,  672,  702,  672,
      672,  672,  703,  699,  699,  704,  700,  700,  701,  701,
        0,    0,  698,  705,  701,  702,  702,  706,    0,  703,
      703,  700,  704,  704,  704,  699,  707,    0,  672,  672,
      705,  705,    0,  708,  706,  706,  702,    0,    0,  709,
        0,    0,  710,  707,  707,  711,    0,    0,    0,  705,

      708,  708,    0,  712,    0,  706,  709,  709,  707,  710,
      710,    0,  711,  711,  713,  709,    0,    0,  714,  708,
      712,  712,  715,    0,  716,  712,  717,    0,  718,  710,
        0,  713,  713,    0,  711,  714,  714,    0,  719,  715,
      715,  716,  716,  717,  717,  718,  718,    0,  714,  720,
        0,  713,  721,    0,  718,  719,  719,  722,    0,    0,
      723,    0,  724,    0,  715,    0,  720,  720,  725,  721,
      721,    0,    0,  726,  722,  722,  720,  723,  723,  724,
      724,  727,  721,  728,    0,  725,  725,  725,  729,  724,
      726,  726,  730,  723,    0,  731,  726,    0,  727,  727,

      728,  728,  732,    0,  733,  729,  729,  734,    0,  730,
      730,  729,  731,  731,  735,  728,    0,    0,  737,  732,
      732,  733,  733,    0,  734,  734,  736,  733,  738,    0,
        0,  735,  735,  739,  734,  737,  737,  735,  740,    0,
      732,  741,    0,  736,  736,  738,  738,  742,  736,    0,
      739,  739,  743,    0,  739,  740,  740,  744,  741,  741,
        0,  738,    0,  745,  742,  742,  742,    0,  746,  743,
      743,    0,  741,  747,  744,  744,    0,  740,  748,  743,
      745,  745,    0,    0,  745,  746,  746,  749,    0,  746,
      747,  747,  750,    0,  744,  748,  748,  751,    0,  752,

      748,    0,  753,    0,  749,  749,    0,    0,    0,  750,
      750,    0,    0,  754,  751,  751,  752,  752,    0,  753,
      753,    0,    0,  755,  749,  753,  756,    0,  757,  750,
      754,  754,  758,    0,  759,  752,  751,  760,    0,  753,
      755,  755,  761,  756,  756,  757,  757,  757,    0,  758,
      758,  759,  759,  762,  760,  760,  763,    0,    0,  761,
      761,  755,  764,    0,  756,  761,  765,    0,  766,  760,
      762,  762,    0,  763,  763,  763,  767,    0,    0,  764,
      764,    0,    0,  765,  765,  766,  766,  768,    0,    0,
      766,  769,    0,  767,  767,    0,  762,    0,  770,  765,

      771,    0,  773,    0,  768,  768,  768,  772,  769,  769,
        0,    0,    0,  767,  769,  770,  770,  771,  771,  773,
      773,  770,  782,  773,  772,  772,  772,  777,  777,  782,
      777,  783,    0,  777,    0,  777,    0,    0,  783,  782,
      782,    0,    0,  782,    0,  784,    0,    0,  783,  783,
      777,  779,  784,    0,  779,    0,    0,    0,    0,  779,
      779,  779,  784,  784,  779,    0,  779,  786,    0,    0,
        0,  785,    0,  779,  786,  779,  779,  779,  785,  787,
        0,  908,  784,  788,  786,  786,  787,    0,  785,  785,
      788,    0,    0,    0,  786,  790,  787,  787,  908,  908,

      788,  788,  790,    0,  779,  779,  781,    0,    0,  781,
      785,    0,  790,  790,  781,  781,  781,  787,  789,  781,
      909,    0,    0,    0,  910,  789,  790,  791,  781,    0,
      781,  781,  781,  790,  791,  789,  789,  909,  909,  792,
        0,  910,  910,  909,  791,  791,  792,  910,    0,    0,
        0,  789,    0,  909,  793,    0,  792,  792,  791,  781,
      781,  793,    0,    0,    0,  791,  794,    0,  795,    0,
      792,  793,  793,  794,  796,  795,    0,  792,    0,    0,
      793,  796,    0,  794,  794,  795,  795,  797,    0,  798,
        0,  796,  796,  796,  797,    0,  798,    0,    0,    0,

      795,  799,    0,  800,  797,  797,  798,  798,  799,  801,
      800,    0,  798,    0,    0,  802,  801,    0,  799,  799,
      800,  800,  802,  803,  799,    0,  801,  801,  804,    0,
      803,    0,  802,  802,    0,  804,  805,    0,    0,  800,
      803,  803,  801,  805,    0,  804,  804,    0,    0,  802,
        0,  806,    0,  805,  805,  805,  807,    0,  806,  808,
        0,  803,    0,  807,    0,  809,  808,  804,  806,  806,
        0,  810,  809,  807,  807,    0,  808,  808,  810,  811,
        0,  806,  809,  809,    0,  812,  811,  813,  810,  810,
      810,    0,  812,  814,  813,    0,  811,  811,  807,  815,

      814,  811,  812,  812,  813,  813,  815,  816,  813,    0,
      814,  814,  817,    0,  816,  825,  815,  815,    0,  817,
        0,    0,  825,  911,  816,  816,  814,  818,    0,  817,
      817,  817,  825,  825,  818,  819,  815,    0,  816,  820,
      911,  911,  819,  911,  818,  818,  820,  821,  825,  912,
      818,    0,  819,  819,  821,  822,  820,  820,  819,    0,
        0,  823,  822,  824,  821,  821,  912,  912,  823,  826,
      824,  912,  822,  822,    0,  826,  826,  820,  823,  823,
      824,  824,  822,  827,  821,  828,  826,  826,  832,  832,
      827,  832,  828,  824,  832,    0,  832,    0,    0,  823,

      827,  827,  828,  828,    0,    0,  839,    0,  827,    0,
        0,  832,  834,  839,  913,  834,    0,    0,    0,    0,
      834,  834,  834,  839,  839,  834,  850,  834,  840,    0,
        0,  913,  913,  850,  834,  840,  834,  834,  834,    0,
        0,  913,  915,  850,  850,  840,  840,  850,    0,  839,
        0,  840,    0,    0,    0,  845,  845,    0,  845,  915,
      915,  845,    0,  845,  851,  834,  834,  836,    0,    0,
      836,  851,    0,    0,    0,  836,  836,  836,  845,  852,
      836,  851,  851,  854,    0,    0,  852,  863,    0,  836,
      854,  836,  836,  836,  863,  853,  852,  852,    0,    0,

      854,  854,  853,  851,  863,  863,  852,    0,    0,  863,
      855,    0,  853,  853,    0,    0,  854,  855,    0,    0,
      836,  836,  847,    0,    0,  847,    0,  855,  855,  855,
      847,  847,  847,  853,  856,  847,  857,  847,  858,    0,
        0,  856,    0,  857,  847,  858,  847,  847,  847,    0,
      916,  856,  856,  857,  857,  858,  858,  856,    0,  857,
        0,    0,    0,    0,    0,    0,  859,  916,  916,    0,
        0,  861,  858,  859,  860,  847,  847,  849,  861,  917,
      849,  860,    0,  859,  859,  849,  849,  849,  861,  861,
      849,  860,  860,  860,  923,    0,  917,  917,  862,  849,

        0,  849,  849,  849,  859,  862,    0,  864,    0,    0,
        0,  923,  923,  861,  864,  862,  862,  862,    0,  865,
        0,    0,  866,    0,  864,  864,  865,  867,  864,  866,
      849,  849,  923,    0,  867,    0,  865,  865,    0,  866,
      866,  868,    0,    0,  867,  867,    0,  869,  868,    0,
      867,    0,    0,  866,  869,  870,  865,    0,  868,  868,
      874,  874,  870,  874,  869,  869,  874,  918,  874,  879,
        0,  881,  870,  870,  869,    0,  879,    0,  881,  868,
        0,    0,    0,  874,  918,  918,  879,  879,  881,  881,
        0,    0,    0,  870,  876,    0,  926,  876,    0,  918,

        0,    0,  876,  876,  876,  884,  879,  876,  885,  876,
      886,    0,  884,  926,  926,  885,  876,  886,  876,  876,
      876,    0,  884,  884,    0,  885,  885,  886,  886,    0,
        0,  884,    0,  898,  898,    0,  898,  887,    0,  898,
      885,  898,    0,  888,  887,    0,  886,  876,  876,  878,
      888,  914,  878,    0,  887,  887,  898,  878,  878,  878,
      888,  888,  878,  889,    0,    0,  888,    0,  914,  914,
      889,  878,  890,  878,  878,  878,  887,  891,    0,  890,
      889,  889,  894,  894,  891,    0,    0,    0,  914,  890,
      890,  892,    0,    0,  891,  891,    0,  893,  892,    0,

      889,  919,  878,  878,  893,    0,  894,  891,  892,  892,
      890,  894,  895,  895,  893,  893,    0,  894,  919,  919,
        0,  920,  893,    0,  892,  922,  894,  894,  921,  902,
      902,    0,  902,  919,    0,  902,  895,  902,  920,  920,
        0,  895,  922,  922,  922,  921,  921,  895,    0,  905,
      905,  920,  902,  905,    0,    0,  895,  895,  901,    0,
      921,  901,  905,    0,  905,    0,  901,  901,  901,  907,
      907,  901,  907,  925,    0,  907,    0,  907,  924,    0,
      901,  927,  901,  901,  901,    0,  928,    0,    0,  930,
      925,  925,  907,  905,  905,  924,  924,  924,  927,  927,

        0,  929,  927,  928,  928,  925,  930,  930,  930,    0,
      931,  901,  901,  904,  932,    0,  904,    0,  929,  929,
        0,  904,  904,  904,  929,  933,  904,  931,  931,    0,
        0,  932,  932,  934,    0,  904,  935,  904,  904,  904,
      936,  932,  933,  933,  937,    0,  931,  933,    0,    0,
      934,  934,  938,  935,  935,  934,  939,  936,  936,  940,
        0,  937,  937,  936,    0,    0,  904,  904,  941,  938,
      938,  942,  935,  939,  939,  943,  940,  940,  940,  938,
      944,    0,  937,  939,    0,  941,  941,  941,  942,  942,
      945,    0,  943,  943,  946,    0,  947,  944,  944,  948,

        0,  949,  944,  950,    0,  951,    0,  945,  945,  952,
        0,  946,  946,  947,  947,    0,  948,  948,  949,  949,
      950,  950,  951,  951,  953,    0,  952,  952,  951,  945,
      954,    0,    0,  947,  955,    0,  956,    0,    0,    0,
      957,  953,  953,    0,  958,  950,  959,  954,  954,  960,
      952,  955,  955,  956,  956,    0,  953,  957,  957,  961,
      954,  958,  958,  959,  959,    0,  960,  960,  962,    0,
      955,  963,    0,  956,  956,  964,  961,  961,  965,  960,
      961,    0,  966,  959,  968,  962,  962,    0,  963,  963,
      967,    0,  964,  964,  971,  965,  965,    0,  964,  966,

      966,  968,  968,  963,    0,  966,  969,  967,  967,  970,
        0,  971,  971,  972,  965,    0,  973,    0,    0,    0,
      967,  974,  968,  969,  969,    0,  970,  970,  975,    0,
      972,  972,  969,  973,  973,  976,  972,    0,  974,  974,
      977,    0,  974,  978,    0,  975,  975,  970,  979,    0,
      980,    0,  976,  976,    0,  975,  981,  977,  977,  982,
      978,  978,    0,    0,    0,  979,  979,  980,  980,    0,
      983,    0,  976,  981,  981,  979,  982,  982,  984,    0,
      978,  981,  985,    0,  986,    0,  980,  983,  983,  987,
        0,  988,    0,    0,  989,  984,  984,  990,    0,  985,

      985,  986,  986,  991,    0,  992,  987,  987,  988,  988,
      984,  989,  989,    0,  990,  990,    0,    0,    0,  985,
      991,  991,  992,  992,    0,    0,    0,  988, 1112,  993,
      993,  992,  993, 1003,    0,  993,    0,  993,    0,  991,
     1003,  996,  996,    0,  996, 1112, 1112,  996,    0,  996,
     1003, 1003,  993,  995, 1000, 1000,  995,    0, 1000,    0,
     1003,  995,  995,  995,  996,    0,  995, 1000,  995, 1000,
     1053, 1053, 1053, 1053,    0,  995, 1053,  995,  995,  995,
     1002, 1002,    0, 1002, 1004,    0, 1002, 1005, 1002, 1040,
     1040, 1004, 1040,    0, 1005, 1040, 1118, 1040, 1000, 1000,

        0, 1004, 1004, 1002, 1005, 1005,  995,  995,  999,    0,
        0,  999, 1040, 1118, 1118,    0,  999,  999,  999, 1006,
        0,  999, 1007,    0, 1008, 1005, 1006,    0, 1009, 1007,
      999, 1008,  999,  999,  999, 1009, 1006, 1006, 1120, 1007,
     1007, 1008, 1008,    0, 1006, 1009, 1009, 1081, 1081, 1081,
     1081,    0, 1013, 1081, 1009, 1120, 1120, 1010, 1007, 1013,
     1120,  999,  999, 1001, 1010,    0, 1001,    0,    0, 1013,
     1013, 1001, 1001, 1001, 1010, 1010, 1001, 1011, 1001, 1012,
        0,    0,    0, 1010, 1011, 1001, 1012, 1001, 1001, 1001,
     1013, 1014,    0, 1015, 1011, 1011, 1012, 1012, 1014,    0,

     1015, 1012,    0, 1011,    0,    0,    0, 1016, 1014, 1014,
     1015, 1015,    0, 1017, 1016, 1018, 1001, 1001,    0, 1113,
     1017, 1020, 1018, 1014, 1016, 1016, 1016, 1019, 1020, 1015,
     1017, 1017, 1018, 1018, 1019, 1021, 1113, 1113, 1020, 1020,
     1022,    0, 1021, 1020, 1019, 1019, 1017, 1022, 1018, 1023,
        0,    0, 1021, 1021, 1019, 1113, 1023, 1022, 1022,    0,
        0, 1024,    0, 1025,    0,    0, 1023, 1023, 1024,    0,
     1025,    0,    0, 1021,    0,    0, 1026,    0, 1024, 1024,
     1025, 1025, 1025, 1026, 1027,    0, 1024,    0, 1028,    0,
     1029, 1027, 1030, 1026, 1026, 1028,    0, 1029, 1114, 1030,

        0, 1027, 1027,    0,    0, 1028, 1028, 1029, 1029, 1030,
     1030, 1031,    0, 1032, 1026, 1114, 1114, 1027, 1031,    0,
     1032,    0, 1030, 1029,    0, 1033, 1028,    0, 1031, 1031,
     1032, 1032, 1033, 1031, 1032, 1114,    0, 1034,    0, 1035,
        0,    0, 1033, 1033, 1034, 1036, 1035, 1133,    0,    0,
        0,    0, 1036, 1037, 1034, 1034, 1035, 1035, 1035, 1038,
     1037, 1115, 1036, 1036, 1133, 1133, 1038, 1039, 1036,    0,
     1037, 1037, 1037,    0, 1039,    0, 1038, 1038, 1115, 1115,
     1043, 1043, 1036, 1043, 1039, 1039, 1043,    0, 1043,    0,
     1124,    0,    0, 1039,    0, 1038, 1042, 1047, 1047, 1042,

     1115, 1047,    0, 1043, 1042, 1042, 1042, 1124, 1124, 1042,
     1047, 1042, 1047, 1106, 1106, 1106, 1106, 1124, 1042, 1106,
     1042, 1042, 1042, 1049, 1049,    0, 1049, 1050,    0, 1049,
     1062, 1049, 1052, 1052, 1050, 1052,    0, 1062, 1052,    0,
     1052, 1047, 1047,    0, 1050, 1050, 1049, 1062, 1062, 1042,
     1042, 1044, 1059, 1059, 1044, 1052, 1059, 1062,    0, 1044,
     1044, 1044, 1051,    0, 1044, 1059, 1044, 1059,    0, 1051,
        0, 1067,    0, 1044,    0, 1044, 1044, 1044, 1067, 1051,
     1051,    0,    0,    0, 1055, 1055,    0, 1055, 1067, 1067,
     1055,    0, 1055, 1065,    0, 1063, 1059, 1059, 1051,    0,

     1065,    0, 1063, 1067, 1044, 1044, 1046, 1055,    0, 1046,
     1065, 1065, 1063, 1063, 1046, 1046, 1046, 1061, 1061, 1046,
     1061,    0,    0, 1061, 1119, 1061,    0, 1064, 1046, 1065,
     1046, 1046, 1046, 1063, 1064,    0, 1068,    0,    0, 1066,
     1061, 1119, 1119, 1068, 1064, 1064, 1066, 1119, 1069,    0,
     1126,    0, 1064, 1068, 1068, 1069, 1066, 1066,    0, 1046,
     1046, 1048,    0,    0, 1048, 1069, 1069, 1126, 1126, 1048,
     1048, 1048, 1068, 1070, 1048, 1071, 1048, 1066,    0,    0,
     1070, 1069, 1071, 1048,    0, 1048, 1048, 1048, 1073, 1126,
     1070, 1070, 1071, 1071, 1074, 1073, 1111, 1111, 1111, 1111,

     1070, 1074, 1111, 1072,    0, 1073, 1073, 1073,    0,    0,
     1072, 1074, 1074, 1071, 1048, 1048, 1054,    0,    0, 1054,
     1072, 1072,    0,    0, 1054, 1054, 1054, 1075, 1072, 1054,
     1076, 1054, 1074, 1130, 1075,    0, 1077, 1076, 1054,    0,
     1054, 1054, 1054, 1077, 1075, 1075,    0, 1076, 1076, 1078,
     1130, 1130,    0, 1077, 1077, 1079, 1078,    0, 1077, 1116,
     1130,    0, 1079, 1076,    0, 1075, 1078, 1078, 1078, 1054,
     1054, 1056, 1079, 1079, 1056,    0, 1116, 1116, 1079, 1056,
     1056, 1056, 1080, 1080, 1056, 1080, 1056,    0, 1080,    0,
     1080, 1117, 1116, 1056, 1131, 1056, 1056, 1056, 1083, 1083,

     1093, 1083,    0,    0, 1083, 1080, 1083, 1093, 1117, 1117,
        0, 1131, 1131,    0,    0, 1087, 1087, 1093, 1093, 1087,
     1090, 1083, 1093, 1117, 1056, 1056, 1058, 1090, 1087, 1058,
     1087,    0, 1131,    0, 1058, 1058, 1058, 1090, 1090, 1058,
     1123, 1089, 1089,    0, 1089,    0, 1090, 1089, 1058, 1089,
     1058, 1058, 1058,    0, 1096,    0, 1091, 1123, 1123, 1087,
     1087, 1096,    0, 1091, 1089,    0,    0,    0,    0, 1092,
     1123, 1096, 1096, 1091, 1091, 1096, 1092,    0,    0, 1058,
     1058, 1060, 1091,    0, 1060,    0, 1092, 1092,    0, 1060,
     1060, 1060, 1094,    0, 1060, 1092, 1060, 1095,    0, 1094,

     1121,    0,    0, 1060, 1095, 1060, 1060, 1060,    0, 1094,
     1094, 1094,    0, 1097, 1095, 1095,    0, 1121, 1121, 1095,
     1097,    0,    0, 1121,    0, 1122,    0,    0, 1101, 1101,
     1097, 1097,    0,    0, 1060, 1060, 1082,    0, 1136, 1082,
        0,    0, 1122, 1122, 1082, 1082, 1082, 1098, 1122, 1082,
     1097, 1082, 1099,    0, 1098, 1136, 1136, 1101, 1082, 1099,
     1082, 1082, 1082, 1101, 1098, 1098, 1098,    0, 1143, 1099,
     1099,    0, 1101, 1101, 1105, 1105,    0, 1105,    0,    0,
     1105,    0, 1105, 1107, 1107, 1143, 1143, 1107, 1099, 1082,
     1082, 1084,    0,    0, 1084,    0, 1107, 1105, 1107, 1084,

     1084, 1084, 1109, 1109, 1084, 1109, 1084,    0, 1109,    0,
     1109,    0, 1127, 1084, 1129, 1084, 1084, 1084, 1110, 1110,
     1125, 1110, 1128,    0, 1110, 1109, 1110, 1107, 1107, 1127,
     1127, 1129, 1129,    0,    0, 1127,    0, 1125, 1125, 1128,
     1128, 1110,    0, 1128, 1084, 1084, 1086, 1135,    0, 1086,
     1129,    0, 1125,    0, 1086, 1086, 1086, 1132,    0, 1086,
     1134,    0,    0,    0, 1135, 1135,    0, 1137, 1086, 1138,
     1086, 1086, 1086,    0, 1132, 1132, 1139, 1134, 1134, 1135,
     1132,    0,    0, 1134, 1137, 1137, 1138, 1138,    0,    0,
     1140,    0, 1138, 1139, 1139,    0,    0,    0,    0, 1086,

     1086, 1088,    0,    0, 1088, 1137,    0, 1140, 1140, 1088,
     1088, 1088, 1139, 1141, 1088, 1142, 1088, 1144,    0,    0,
     1140, 1145,    0, 1088, 1146, 1088, 1088, 1088, 1140,    0,
     1141, 1141, 1142, 1142, 1144, 1144, 1141,    0, 1145, 1145,
        0, 1146, 1146,    0, 1147,    0,    0, 1142,    0,    0,
        0,    0,    0, 1149, 1088, 1088, 1108, 1148, 1145, 1108,
        0, 1147, 1147,    0, 1108, 1108, 1108, 1147, 1150, 1108,
     1149, 1149, 1151,    0, 1148, 1148, 1152,    0, 1108, 1153,
     1108, 1108, 1108, 1154, 1148, 1150, 1150, 1155,    0, 1151,
     1151,    0,    0, 1152, 1152,    0, 1153, 1153, 1151, 1156,

     1154, 1154, 1153,    0, 1155, 1155, 1155, 1157,    0, 1108,
     1108,    0, 1158, 1152, 1159,    0, 1156, 1156, 1160,    0,
     1161, 1154, 1162,    0, 1157, 1157, 1163,    0, 1157, 1158,
     1158, 1159, 1159, 1164,    0, 1160, 1160, 1161, 1161, 1162,
     1162, 1160, 1165, 1163, 1163, 1163, 1166,    0, 1167,    0,
     1164, 1164, 1168,    0, 1169,    0, 1164, 1170,    0, 1165,
     1165, 1171,    0, 1166, 1166, 1167, 1167,    0, 1172, 1168,
     1168, 1169, 1169,    0, 1170, 1170, 1173,    0, 1171, 1171,
     1165,    0,    0, 1174,    0, 1172, 1172, 1175,    0,    0,
     1168, 1172,    0, 1173, 1173,    0,    0, 1169,    0, 1171,

     1174, 1174,    0,    0, 1175, 1175,    0, 1176, 1176,    0,
     1176,    0, 1173, 1176,    0, 1176,    0,    0,    0, 1174,
     1177, 1177, 1177, 1177, 1178, 1178, 1177,    0, 1178,    0,
     1176,    0, 1180, 1180,    0, 1180,    0, 1178, 1180, 1178,
     1180, 1181, 1181,    0, 1181, 1256,    0, 1181,    0, 1181,
     1182, 1182, 1182, 1182, 1185, 1180, 1182,    0, 1183,    0,
        0, 1185, 1256, 1256, 1181, 1183,    0,    0, 1178, 1178,
     1179, 1185, 1185, 1179,    0, 1183, 1183, 1183, 1179, 1179,
     1179, 1184,    0, 1179, 1187, 1179,    0, 1258, 1184,    0,
     1186, 1187, 1179, 1185, 1179, 1179, 1179, 1186, 1184, 1184,

     1184, 1187, 1187, 1188, 1258, 1258,    0, 1186, 1186, 1189,
     1188, 1187,    0,    0,    0, 1190, 1189,    0, 1191,    0,
     1188, 1188, 1190, 1179, 1179, 1191, 1189, 1189, 1258, 1186,
     1192,    0, 1190, 1190, 1193, 1191, 1191, 1192,    0,    0,
        0, 1193,    0, 1194,    0,    0, 1195, 1192, 1192, 1259,
     1194, 1193, 1193, 1195,    0,    0, 1191,    0, 1198, 1192,
     1194, 1194, 1196, 1195, 1195, 1198, 1259, 1259,    0, 1196,
     1197,    0, 1193, 1195,    0, 1198, 1198, 1197,    0, 1196,
     1196, 1194, 1199,    0, 1200, 1196,    0, 1197, 1197, 1199,
     1201, 1200,    0, 1197,    0,    0, 1198, 1201, 1202, 1199,

     1199, 1200, 1200, 1203,    0, 1202,    0, 1201, 1201,    0,
     1203,    0, 1204, 1200,    0, 1202, 1202,    0,    0, 1204,
     1203, 1203,    0,    0, 1205,    0, 1206,    0,    0, 1204,
     1204, 1205, 1207, 1206, 1202, 1204,    0,    0,    0, 1207,
        0, 1205, 1205, 1206, 1206,    0, 1208,    0, 1209, 1207,
     1207, 1210,    0, 1208, 1211, 1209, 1206, 1207, 1210,    0,
     1219, 1211, 1205, 1208, 1208, 1209, 1209, 1219, 1210, 1210,
        0, 1211, 1211, 1212, 1212,    0, 1212, 1219, 1219, 1212,
        0, 1212,    0,    0,    0, 1209,    0, 1211,    0, 1210,
        0, 1213, 1213, 1213, 1213,    0, 1212, 1213, 1214, 1214,

     1216, 1216, 1214, 1216, 1217, 1217, 1216, 1217, 1216,    0,
     1217, 1214, 1217, 1214, 1218, 1218, 1218, 1218, 1220, 1220,
     1218, 1220, 1260, 1216, 1220,    0, 1220, 1217, 1221, 1221,
     1221, 1221, 1222, 1222, 1221,    0, 1222,    0,    0, 1260,
     1260, 1220, 1214, 1214,    0, 1222,    0, 1222, 1224, 1224,
        0, 1224, 1225, 1225, 1224, 1225, 1224,    0, 1225,    0,
     1225, 1226, 1226, 1226, 1226, 1227,    0, 1226,    0,    0,
        0, 1224, 1227, 1228,    0, 1225, 1222, 1222, 1229,    0,
     1228, 1230, 1227, 1227, 1227, 1229, 1231,    0, 1230, 1257,
     1228, 1228, 1228, 1231, 1232, 1229, 1229,    0, 1230, 1230,

        0, 1232,    0, 1231, 1231,    0, 1257, 1257, 1233,    0,
        0, 1232, 1232,    0,    0, 1233, 1234, 1229,    0,    0,
     1230,    0,    0, 1234, 1231, 1233, 1233, 1257, 1235,    0,
        0, 1233, 1232, 1234, 1234, 1235, 1236,    0, 1263, 1234,
     1237,    0, 1239, 1236, 1238, 1235, 1235, 1237,    0, 1239,
        0, 1238,    0, 1236, 1236, 1263, 1263, 1237, 1237, 1239,
     1239, 1238, 1238, 1237,    0,    0, 1235, 1239,    0,    0,
     1240, 1240, 1236, 1240, 1238,    0, 1240,    0, 1240, 1241,
     1241, 1241, 1241, 1242, 1242, 1241, 1264, 1242,    0, 1244,
     1244,    0, 1244, 1240,    0, 1244, 1242, 1244, 1242, 1245,

     1245,    0, 1245, 1264, 1264, 1245, 1247, 1245, 1246, 1246,
     1246, 1246, 1244, 1247, 1246,    0,    0,    0, 1248, 1264,
        0,    0, 1245, 1247, 1247, 1248, 1262, 1242, 1242,    0,
     1249,    0, 1250, 1247, 1251, 1248, 1248, 1249,    0, 1250,
        0, 1251,    0, 1262, 1262,    0, 1252, 1249, 1249, 1250,
     1250, 1251, 1251, 1252,    0,    0, 1248, 1249, 1262, 1253,
     1253,    0, 1253, 1252, 1252, 1253,    0, 1253, 1255,    0,
     1250, 1251, 1254, 1254, 1254, 1254, 1261,    0, 1254, 1265,
        0, 1266, 1253, 1267, 1252, 1255, 1255,    0, 1268,    0,
     1269,    0, 1270, 1261, 1261, 1255, 1265, 1265, 1266, 1266,

     1267, 1267, 1271,    0, 1266, 1268, 1268, 1269, 1269, 1270,
     1270, 1255, 1261, 1269, 1272,    0, 1273, 1265, 1274, 1271,
     1271,    0, 1275,    0,    0, 1271, 1268,    0,    0, 1276,
     1270, 1272, 1272, 1273, 1273, 1274, 1274, 1277, 1273, 1275,
     1275, 1274, 1278,    0, 1279, 1275, 1276, 1276,    0,    0,
        0, 1280,    0, 1281, 1277, 1277,    0,    0,    0, 1278,
     1278, 1279, 1279, 1282,    0, 1276, 1283, 1279, 1280, 1280,
     1281, 1281, 1284, 1277, 1285, 1281, 1286,    0, 1287,    0,
     1282, 1282,    0, 1283, 1283, 1288,    0, 1289,    0, 1284,
     1284, 1285, 1285, 1286, 1286, 1287, 1287, 1285,    0, 1286,

        0, 1290, 1288, 1288, 1289, 1289,    0,    0, 1291,    0,
     1292,    0, 1293,    0, 1294,    0, 1284, 1289, 1290, 1290,
        0, 1295,    0, 1296, 1290, 1291, 1291, 1292, 1292, 1293,
     1293, 1294, 1294, 1297,    0, 1298,    0, 1294, 1295, 1295,
     1296, 1296,    0,    0, 1299,    0, 1292, 1300,    0,    0,
     1297, 1297, 1298, 1298,    0,    0,    0,    0,    0,    0,
     1295, 1299, 1299,    0, 1300, 1300, 1301, 1301, 1303, 1301,
     1297,    0, 1301,    0, 1301, 1303,    0, 1299,    0,    0,
     1300, 1302, 1302, 1302, 1302, 1303, 1303, 1302,    0, 1301,
     1304,    0,    0, 1305,    0, 1306,    0, 1304,    0,    0,

     1305,    0, 1306,    0,    0, 1351, 1303, 1304, 1304,    0,
     1305, 1305, 1306, 1306, 1307,    0, 1306, 1308,    0, 1309,
        0, 1307, 1351, 1351, 1308, 1352, 1309,    0, 1304, 1305,
        0, 1307, 1307,    0, 1308, 1308, 1309, 1309, 1310,    0,
     1308, 1311, 1352, 1352,    0, 1310, 1307, 1312, 1311,    0,
     1313,    0,    0, 1314, 1312, 1310, 1310, 1313, 1311, 1311,
     1314, 1310,    0, 1352, 1312, 1312,    0, 1313, 1313, 1315,
     1314, 1314, 1313, 1316,    0, 1317, 1315,    0, 1318, 1312,
     1316,    0, 1317,    0, 1311, 1318, 1315, 1315, 1315,    0,
     1316, 1316, 1317, 1317, 1319, 1318, 1318, 1320,    0, 1321,

        0, 1319,    0,    0, 1320, 1348, 1321,    0,    0, 1317,
     1318, 1319, 1319, 1322, 1320, 1320, 1321, 1321, 1323,    0,
     1322, 1319, 1348, 1348,    0, 1323, 1324,    0, 1348,    0,
     1322, 1322,    0, 1324,    0, 1323, 1323,    0,    0,    0,
     1329,    0, 1321, 1324, 1324, 1325, 1325, 1329, 1325,    0,
     1322, 1325,    0, 1325,    0, 1323,    0, 1329, 1329, 1324,
     1326, 1326, 1326, 1326, 1327, 1327, 1326, 1327, 1325,    0,
     1327,    0, 1327, 1328, 1328, 1328, 1328, 1330, 1329, 1328,
        0, 1331,    0, 1332, 1330, 1333,    0, 1327, 1331, 1334,
     1332,    0, 1333,    0, 1330, 1330, 1334,    0, 1331, 1331,

     1332, 1332, 1333, 1333, 1332, 1335, 1334, 1334, 1333,    0,
        0, 1336, 1335,    0,    0, 1330,    0, 1331, 1336, 1337,
        0, 1349, 1335, 1335, 1338,    0, 1337, 1335, 1336, 1336,
     1336, 1338, 1334, 1339,    0,    0, 1337, 1337, 1349, 1349,
     1339, 1338, 1338,    0, 1349,    0, 1340, 1340, 1342, 1340,
     1339, 1339, 1340, 1337, 1340, 1342, 1338, 1341, 1341, 1341,
     1341, 1343,    0, 1341, 1344, 1342, 1342,    0, 1343, 1340,
     1345, 1344,    0,    0,    0,    0, 1339, 1345, 1343, 1343,
     1342, 1344, 1344, 1346, 1343, 1347,    0, 1345, 1345, 1350,
     1346, 1353, 1347, 1354,    0, 1355, 1344, 1345, 1356,    0,

     1346, 1346, 1347, 1347,    0,    0, 1350, 1350, 1353, 1353,
     1354, 1354, 1355, 1355, 1357, 1356, 1356, 1358,    0,    0,
     1346, 1350, 1347, 1353, 1359,    0, 1360,    0, 1361,    0,
     1354, 1357, 1357,    0, 1358, 1358, 1357, 1362,    0, 1363,
     1358, 1359, 1359, 1360, 1360, 1361, 1361, 1364,    0, 1366,
     1361,    0, 1365,    0, 1362, 1362, 1363, 1363, 1365, 1367,
        0, 1368,    0,    0, 1364, 1364, 1366, 1366, 1366, 1365,
     1365, 1369,    0, 1370,    0,    0, 1367, 1367, 1368, 1368,
     1364,    0, 1367, 1371,    0, 1372,    0, 1373, 1369, 1369,
     1370, 1370, 1374, 1369, 1375,    0, 1376,    0, 1368, 1377,

     1371, 1371, 1372, 1372, 1373, 1373, 1372,    0, 1378, 1374,
     1374, 1375, 1375, 1376, 1376, 1378, 1377, 1377,    0,    0,
     1371, 1379,    0,    0, 1380, 1378, 1378, 1381, 1379, 1382,
     1374, 1380,    0,    0, 1381, 1378, 1382, 1376, 1379, 1379,
     1377, 1380, 1380, 1380, 1381, 1381, 1382, 1382, 1379, 1383,
        0, 1384,    0,    0, 1382,    0, 1383, 1386, 1384,    0,
        0,    0,    0, 1385, 1386, 1381, 1383, 1383, 1384, 1384,
     1385, 1383, 1387, 1385, 1386, 1386,    0, 1388,    0, 1387,
     1385, 1385, 1386, 1384, 1388, 1389,    0,    0,    0, 1387,
     1387, 1390, 1389,    0, 1388, 1388,    0, 1391, 1390, 1392,

        0, 1410, 1389, 1389, 1391, 1411, 1392,    0, 1390, 1390,
        0, 1389, 1390, 1393, 1391, 1391, 1392, 1392, 1410, 1410,
     1393, 1394, 1411, 1411,    0, 1395,    0, 1398, 1394, 1391,
     1393, 1393, 1395, 1396, 1398, 1413, 1393,    0, 1394, 1394,
     1396, 1397, 1395, 1395, 1398, 1398, 1398,    0, 1397, 1399,
     1396, 1396, 1413, 1413, 1395, 1401, 1399, 1400, 1397, 1397,
     1396,    0, 1401, 1403, 1400, 1401, 1399, 1399, 1397,    0,
     1403,    0, 1401, 1401, 1400, 1400, 1402,    0, 1404,    0,
     1403, 1403,    0, 1402, 1403, 1404,    0, 1399,    0, 1400,
     1405,    0, 1406, 1402, 1402, 1404, 1404, 1405, 1407, 1406,

        0, 1409, 1402, 1404, 1408, 1407, 1412, 1405, 1405, 1406,
     1406, 1408, 1405,    0, 1414, 1407, 1407, 1406, 1409, 1409,
        0, 1408, 1408, 1412, 1412,    0,    0, 1408, 1415,    0,
     1407, 1414, 1414, 1416,    0, 1417,    0, 1418, 1409, 1419,
        0,    0,    0, 1412, 1420, 1415, 1415, 1421,    0, 1422,
     1416, 1416, 1417, 1417, 1418, 1418, 1419, 1419,    0, 1419,
        0, 1420, 1420, 1423, 1421, 1421, 1422, 1422, 1424,    0,
     1425,    0, 1422, 1426,    0, 1427, 1420, 1428, 1418,    0,
     1423, 1423,    0,    0,    0, 1424, 1424, 1425, 1425,    0,
     1426, 1426, 1427, 1427, 1428, 1428, 1425, 1429,    0, 1430,

     1426,    0, 1431,    0, 1429, 1432, 1430,    0,    0, 1431,
     1450,    0, 1432, 1451, 1429, 1429, 1430, 1430, 1433, 1431,
     1431,    0, 1432, 1432, 1433, 1433, 1434, 1450, 1450, 1453,
     1451, 1451,    0, 1434, 1435, 1433, 1433, 1429, 1432, 1430,
     1431, 1435, 1436, 1434, 1434,    0, 1453, 1453,    0, 1436,
     1437, 1435, 1435,    0,    0, 1438, 1451, 1437,    0, 1436,
     1436, 1435, 1438, 1439, 1434, 1436, 1453, 1437, 1437, 1440,
     1439, 1441, 1438, 1438,    0, 1437, 1440, 1442, 1441,    0,
     1439, 1439,    0, 1443, 1442,    0, 1440, 1440, 1441, 1441,
     1443,    0, 1438,    0, 1442, 1442, 1444,    0,    0,    0,

     1443, 1443, 1452, 1444,    0, 1445,    0,    0,    0, 1440,
     1446, 1441, 1445, 1444, 1444, 1442, 1443, 1446, 1447, 1452,
     1452,    0, 1445, 1445, 1447, 1447, 1454, 1446, 1446,    0,
     1448,    0, 1445, 1446, 1444, 1447, 1447, 1448,    0, 1449,
     1452, 1455,    0, 1454, 1454, 1456, 1449, 1448, 1448,    0,
        0,    0, 1456,    0, 1457, 1448, 1449, 1449, 1455, 1455,
        0, 1457, 1456, 1456, 1471,    0, 1458,    0, 1456,    0,
        0, 1457, 1457, 1458, 1455,    0, 1449, 1457, 1459,    0,
     1460, 1471, 1471, 1458, 1458, 1459, 1472, 1460,    0,    0,
     1481,    0, 1461, 1458, 1462, 1459, 1459, 1460, 1460, 1461,

     1460, 1462,    0, 1472, 1472,    0, 1463, 1481, 1481, 1461,
     1461, 1462, 1462, 1463, 1459, 1462,    0,    0, 1464,    0,
     1465,    0, 1466, 1463, 1463, 1464,    0, 1465,    0, 1466,
        0,    0,    0,    0, 1467, 1464, 1464, 1465, 1465, 1466,
     1466, 1467, 1468, 1465,    0, 1466, 1469,    0, 1470, 1468,
        0, 1467, 1467, 1469, 1473, 1470,    0,    0,    0, 1468,
     1468, 1467, 1474, 1469, 1469, 1470, 1470, 1469, 1470, 1474,
     1475, 1473, 1473,    0, 1476,    0, 1477, 1475, 1468, 1474,
     1474, 1476, 1478, 1477,    0,    0, 1473, 1475, 1475, 1478,
        0, 1476, 1476, 1477, 1477, 1479,    0, 1480,    0, 1478,

     1478,    0, 1479, 1482, 1480,    0,    0, 1476,    0, 1483,
     1482,    0, 1479, 1479, 1480, 1480, 1483,    0,    0, 1477,
     1482, 1482,    0,    0,    0, 1484, 1483, 1483, 1479,    0,
        0,    0, 1484,    0,    0, 1482,    0,    0,    0,    0,
     1480, 1483, 1484, 1484, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491,

     1491,    0,    0, 1491, 1491, 1491, 1492,    0, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,    0,    0,
     1493, 1493, 1493, 1494,    0, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1495, 1495,    0,    0, 1495, 1495, 1495,
     1496,    0, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497,    0,    0, 1497, 1497, 1497, 1498,    0, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499,    0,
        0, 1499, 1499, 1499, 1500,    0, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1501,    0,    0,    0, 1501,    0,
     1501, 1501,    0, 1501, 1501, 1502,    0,    0, 1502, 1502,

        0, 1502, 1502, 1502, 1502, 1502, 1503, 1503,    0, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504,    0, 1504,
     1504,    0,    0, 1504,    0, 1504, 1505, 1505, 1505, 1505,
     1505,    0, 1505, 1506, 1506, 1506, 1506, 1506,    0, 1506,
     1507, 1507, 1507, 1507, 1507,    0, 1507, 1508, 1508, 1508,
     1508, 1508,    0, 1508, 1509, 1509, 1509, 1509, 1509,    0,
     1509, 1510,    0, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1511,    0,    0,    0, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1512,    0, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1513,    0,    0,    0, 1513, 1513, 1513, 1513,

     1513, 1513, 1513, 1514,    0, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1515,    0,    0,    0, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1516,    0,    0,    0, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1517,    0, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1518,    0,    0,    0, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1519,    0, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1520,    0,    0,    0,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521, 1521,    0,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522,    0,
        0,    0, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523,

        0,    0,    0, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1524, 1524,    0, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1525,    0,    0,    0, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1526,    0,    0,    0, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1527, 1527,    0, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1528,    0,    0,    0, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1529,    0,    0,    0, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1530,    0,    0,    0,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531,    0,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,    0,

        0,    0, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1533,
        0,    0,    0, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1534, 1534,    0, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
     1534, 1535,    0,    0,    0, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1536,    0,    0,    0, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1537, 1537,    0, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1538,    0,    0,    0, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1539, 1539,    0, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540,    0, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541,    0,    0,

        0, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542,    0,
        0,    0, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543,
     1543,    0, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1544, 1544,    0,    0, 1544, 1544, 1544, 1545, 1545,    0,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546,    0,
        0,    0, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
     1547,    0, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1548,    0,    0,    0, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1549,    0,    0,    0, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1550, 1550,    0, 1550, 1550, 1550, 1550, 1550,

     1550, 1550, 1550, 1551, 1551,    0,    0, 1551, 1551, 1551,
     1552, 1552,    0, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1553,    0,    0,    0, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1554, 1554,    0, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1555,    0,    0,    0, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1556,    0,    0,    0, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1557, 1557,    0, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558,    0,    0,
     1558, 1558, 1558, 1559, 1559,    0, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1560,    0,    0,    0, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1561, 1561,    0, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1562,    0,    0,    0,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1563,    0,    0,
        0, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564,
        0, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565,
     1565,    0,    0, 1565, 1565, 1565, 1566, 1566,    0, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567,    0,    0,
        0, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568,    0,
        0,    0, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1569,    0, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,

     1570, 1570,    0, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1571, 1571,    0,    0, 1571, 1571, 1571, 1572, 1572,
        0, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573,
        0,    0,    0, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1574, 1574,    0, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1575, 1575,    0, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1576, 1576,    0,    0, 1576, 1576, 1576, 1577,
     1577,    0, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1578, 1578,    0, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1579, 1579,    0, 1579, 1579, 1579, 1579, 1579, 1579,

     1579, 1579, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./lexer.ll"
/*

    This file is part of the Maude 3 interpreter.

    Copyright 1997-2021 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 28 "./lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
extern bool suppressParserErrorMessage;
#line 3195 "<stdout>"

#line 3197 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 125 "./lexer.ll"

#line 127 "./lexer.ll"
	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3436 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1486 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9703 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 130 "./lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 134 "./lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 140 "./lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 141 "./lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 142 "./lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 146 "./lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 150 "./lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 151 "./lexer.ll"
RETURN(KW_VIEW)  // needed for line number handling
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 152 "./lexer.ll"
return KW_OO;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 153 "./lexer.ll"
return KW_LOAD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 154 "./lexer.ll"
return KW_SLOAD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 155 "./lexer.ll"
return KW_PWD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 156 "./lexer.ll"
return KW_CD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 157 "./lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 158 "./lexer.ll"
return KW_POPD;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 159 "./lexer.ll"
return KW_LS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 160 "./lexer.ll"
return KW_LL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 161 "./lexer.ll"
return KW_QUIT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 162 "./lexer.ll"
return KW_EOF;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 163 "./lexer.ll"
return KW_PARSE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 164 "./lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 165 "./lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 166 "./lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 167 "./lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 168 "./lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 169 "./lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 170 "./lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 171 "./lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 172 "./lexer.ll"
return KW_DSREWRITE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 173 "./lexer.ll"
return KW_CHECK;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 174 "./lexer.ll"
return KW_LOOP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 175 "./lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 176 "./lexer.ll"
return KW_NARROW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 177 "./lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 178 "./lexer.ll"
return KW_GET;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 179 "./lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 180 "./lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 181 "./lexer.ll"
return KW_MATCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 182 "./lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 183 "./lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 184 "./lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 185 "./lexer.ll"
return KW_SET;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 186 "./lexer.ll"
return KW_SHOW;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 187 "./lexer.ll"
return KW_ON;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 188 "./lexer.ll"
return KW_OFF;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 189 "./lexer.ll"
return KW_ON_DOT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 190 "./lexer.ll"
return KW_OFF_DOT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 191 "./lexer.ll"
return KW_TRACE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "./lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 193 "./lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 194 "./lexer.ll"
return KW_DO;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 195 "./lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 196 "./lexer.ll"
return KW_CACHES;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 197 "./lexer.ll"
return KW_BODY;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 198 "./lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 199 "./lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 200 "./lexer.ll"
return KW_SELECT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 201 "./lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 202 "./lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 203 "./lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 204 "./lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 205 "./lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 206 "./lexer.ll"
return KW_PRINT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 207 "./lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 208 "./lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 209 "./lexer.ll"
return KW_COLOR;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 210 "./lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 211 "./lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 212 "./lexer.ll"
return KW_FLAT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 213 "./lexer.ll"
return KW_WITH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 214 "./lexer.ll"
return KW_PARENS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 215 "./lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 216 "./lexer.ll"
return KW_CONST;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 217 "./lexer.ll"
return KW_GC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 218 "./lexer.ll"
return KW_RESOURCES;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 219 "./lexer.ll"
return KW_TIME;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 220 "./lexer.ll"
return KW_STATS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 221 "./lexer.ll"
return KW_TIMING;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 222 "./lexer.ll"
return KW_CMD;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 223 "./lexer.ll"
return KW_ALL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 224 "./lexer.ll"
return KW_MODULES;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 225 "./lexer.ll"
return KW_MODULE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 226 "./lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 227 "./lexer.ll"
return KW_SORTS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 228 "./lexer.ll"
return KW_OPS2;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 229 "./lexer.ll"
return KW_VARS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 230 "./lexer.ll"
return KW_MBS;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 231 "./lexer.ll"
return KW_EQS;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 232 "./lexer.ll"
return KW_RLS;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 233 "./lexer.ll"
return KW_STRATS;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 234 "./lexer.ll"
return KW_SDS;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 235 "./lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 236 "./lexer.ll"
return KW_KINDS;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 237 "./lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 238 "./lexer.ll"
return KW_COUNT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 239 "./lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 240 "./lexer.ll"
return KW_GENERATE_BY;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 241 "./lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 242 "./lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 243 "./lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 244 "./lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 245 "./lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 246 "./lexer.ll"
return KW_FILTERED;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 247 "./lexer.ll"
return KW_RESUME;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 248 "./lexer.ll"
return KW_ABORT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 249 "./lexer.ll"
return KW_STEP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 250 "./lexer.ll"
return KW_WHERE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 251 "./lexer.ll"
return KW_DUMP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 252 "./lexer.ll"
return KW_BREAK;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 253 "./lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 254 "./lexer.ll"
return KW_PATH;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 255 "./lexer.ll"
return KW_STATE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 256 "./lexer.ll"
return KW_LABEL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 257 "./lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 258 "./lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 259 "./lexer.ll"
return KW_RAT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 260 "./lexer.ll"
return KW_TEST;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 261 "./lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 262 "./lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 263 "./lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 264 "./lexer.ll"
return KW_FOLD;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 265 "./lexer.ll"
return KW_VFOLD;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 266 "./lexer.ll"
return KW_DESUGARED;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 267 "./lexer.ll"
return KW_PROCESSED;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 268 "./lexer.ll"
return KW_HOOKS;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 269 "./lexer.ll"
return KW_COMBINE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 270 "./lexer.ll"
return KW_FRONTIER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 271 "./lexer.ll"
return KW_MOST;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 272 "./lexer.ll"
return KW_GENERAL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 273 "./lexer.ll"
return *yytext;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 274 "./lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 279 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 284 "./lexer.ll"
{
					  ++lineNumber;
					  yyless(1);  // only absorb one newline
					  if (generateImpliedStep())
					    return KW_IMPLIED_STEP;
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "{" "}" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 299 "./lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 303 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 304 "./lexer.ll"
RETURN(KW_FILTER)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 305 "./lexer.ll"
RETURN(KW_DELAY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 306 "./lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 307 "./lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 308 "./lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 312 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 316 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 321 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 144:
YY_RULE_SETUP
#line 333 "./lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 334 "./lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 335 "./lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 336 "./lexer.ll"
RETURN(KW_ATTR)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 337 "./lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 338 "./lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 339 "./lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 340 "./lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 341 "./lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 342 "./lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 343 "./lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 344 "./lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 345 "./lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 346 "./lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 347 "./lexer.ll"
RETURN(KW_STRAT)		// both strategy attribute and declaration
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 348 "./lexer.ll"
RETURN(KW_ASTRAT)		// strategy attribute only
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 349 "./lexer.ll"
RETURN(KW_DSTRAT)		// declaration of a strategy only
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 350 "./lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 351 "./lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 352 "./lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 353 "./lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 354 "./lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 355 "./lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 356 "./lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 357 "./lexer.ll"
RETURN(KW_PORTAL)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 358 "./lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 359 "./lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 360 "./lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 361 "./lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 362 "./lexer.ll"
RETURN(KW_PCONST)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 363 "./lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 364 "./lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 365 "./lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 366 "./lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 367 "./lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 368 "./lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 369 "./lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 370 "./lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 371 "./lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 372 "./lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 373 "./lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 374 "./lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 375 "./lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 376 "./lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 377 "./lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 378 "./lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 379 "./lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 380 "./lexer.ll"
RETURN(KW_SD)
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 381 "./lexer.ll"
RETURN(KW_CSD)
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 382 "./lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 383 "./lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 384 "./lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 385 "./lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 386 "./lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 387 "./lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 388 "./lexer.ll"
RETURN(KW_ASSIGN)
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 389 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 390 "./lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 391 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 203:
YY_RULE_SETUP
#line 398 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 404 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 410 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 416 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 422 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 428 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 434 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ASSIGN) && lexerBubble.length() >= minLength)
					    EXIT(KW_ASSIGN)
					  else
					    STORE
					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 440 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 446 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 452 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 461 "./lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 465 "./lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 476 "./lexer.ll"
STORE
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 477 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 488 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 499 "./lexer.ll"
STORE_FIX_UP
	YY_BREAK
case YY_STATE_EOF(BUBBLE_MODE):
#line 500 "./lexer.ll"
{
					  //
					  //	An EOF in the middle of a bubble is always an error that drops us
					  //	out of the parser and does a full clean up.
					  //
					  bubbleEofError();
					  yyterminate();
					}
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 219:
YY_RULE_SETUP
#line 516 "./lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 524 "./lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 221:
YY_RULE_SETUP
#line 532 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 536 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 540 "./lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 224:
YY_RULE_SETUP
#line 552 "./lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 558 "./lexer.ll"
accumulator += ' ';
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 559 "./lexer.ll"
accumulator += '"';
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 560 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 561 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 562 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 563 "./lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 572 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 232:
YY_RULE_SETUP
#line 581 "./lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 587 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 588 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 235:
YY_RULE_SETUP
#line 597 "./lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 602 "./lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 237:
YY_RULE_SETUP
#line 611 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 612 "./lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 617 "./lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 631 "./lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 635 "./lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 639 "./lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 643 "./lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 646 "./lexer.ll"
{
					  //
					  //	An EOF could be a benign change of file, an error in the middle
					  //	of a command/module/view or a ^C interrupt or a ^D quit.
					  //	In all cases we want to avoid any yyerror() message.
					  //
					  suppressParserErrorMessage = true;
					  if (UserLevelRewritingContext::interrupted())
					    yyterminate();  // return an end-of-file condition to the parser
					  return handleEof() ? CHANGE_FILE : END_OF_INPUT;
					}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 658 "./lexer.ll"
;
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 659 "./lexer.ll"
++lineNumber;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 660 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 665 "./lexer.ll"
ECHO;
	YY_BREAK
#line 5033 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1486 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1486 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1485);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 665 "./lexer.ll"


#include "lexerAux.cc"

