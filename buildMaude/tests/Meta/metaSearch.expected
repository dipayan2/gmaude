==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, '_*_['Y:Nat, 'Z:Nat] := 'X:Nat, '*, 100, 0) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_*_['a.Nat, '_+_['b.Nat, 'c.Nat]] ; 
  'Y:Nat <- '_+_['b.Nat, 'c.Nat] ; 
  'Z:Nat <- 'a.Nat}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, '_*_['Y:Nat, 'Z:Nat] := 'X:Nat, '*, 100, 1) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_*_['a.Nat, '_+_['b.Nat, 'c.Nat]] ; 
  'Y:Nat <- 'a.Nat ; 
  'Z:Nat <- '_+_['b.Nat, 'c.Nat]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, '_*_['Y:Nat, 'Z:Nat] := 'X:Nat, '*, 100, 2) .
rewrites: 6
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, '_*_['Y:Nat, 'Z:Nat] := 'X:Nat /\ 'Y:Nat = 'a.Nat, '*,
    100, 0) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_*_['a.Nat, '_+_['b.Nat, 'c.Nat]] ; 
  'Y:Nat <- 'a.Nat ; 
  'Z:Nat <- '_+_['b.Nat, 'c.Nat]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, '_*_['Y:Nat, 'Z:Nat] := 'X:Nat /\ 'Y:Nat = 'a.Nat, '*,
    100, 1) .
rewrites: 6
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '*, 100, 0) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_*_['a.Nat, '_+_['b.Nat, 'c.Nat]]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '*, 100, 1) .
rewrites: 3
result ResultTriple: {'_+_['_*_['a.Nat, 'b.Nat], '_*_['a.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_+_['_*_['a.Nat, 'b.Nat], '_*_['a.Nat, 'c.Nat]]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '*, 100, 2) .
rewrites: 5
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '!, 100, 0) .
rewrites: 6
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '+, 100, 0) .
rewrites: 3
result ResultTriple: {'_+_['_*_['a.Nat, 'b.Nat], '_*_['a.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_+_['_*_['a.Nat, 'b.Nat], '_*_['a.Nat, 'c.Nat]]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_*_['a.Nat, '_+_['b.Nat,
    'c.Nat]], 'X:Nat, nil, '+, 100, 1) .
rewrites: 4
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_*_['a.Nat, '_+_['b.Nat, 'c.Nat]]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*, 100, 0) .
rewrites: 3
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- 'a.Nat ; 
  'Y:Nat <- '_+_['b.Nat, 'c.Nat]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*, 100, 1) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat]], 'Nat, 
  'X:Nat <- '_+_['b.Nat, 'c.Nat] ; 
  'Y:Nat <- 'a.Nat}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*, 0, 0) .
rewrites: 2
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat], '_*_['a.Nat, 'd.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*,
    100, 0) .
rewrites: 9
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat, 'd.Nat]], 'Nat, 
  'X:Nat <- 'a.Nat ; 
  'Y:Nat <- '_+_['b.Nat, 'c.Nat, 'd.Nat]}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat], '_*_['a.Nat, 'd.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*,
    100, 1) .
rewrites: 2
result ResultTriple: {'_*_['a.Nat, '_+_['b.Nat, 'c.Nat, 'd.Nat]], 'Nat, 
  'X:Nat <- '_+_['b.Nat, 'c.Nat, 'd.Nat] ; 
  'Y:Nat <- 'a.Nat}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat], '_*_['a.Nat, 'd.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*,
    1, 0) .
rewrites: 8
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH-TEST], '_+_['_*_['a.Nat, 'b.Nat],
    '_*_['a.Nat, 'c.Nat], '_*_['a.Nat, 'd.Nat]], '_*_['X:Nat, 'Y:Nat], nil, '*,
    1, 1) .
rewrites: 8
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH], 'a.State, 'e.State, nil, '*,
    unbounded, 0) .
rewrites: 6
result ResultTriple: {'e.State, 'State, (none).Substitution}
==========================================
reduce in META-LEVEL : metaSearch(['SEARCH], 'a.State, 'e.State, nil, '*,
    unbounded, 1) .
rewrites: 2
result ResultTriple?: (failure).ResultTriple?
==========================================
reduce in META-LEVEL : metaSearchPath(['SEARCH], 'a.State, 'e.State, nil, '*,
    unbounded, 0) .
rewrites: 6
result Trace: {'a.State, 'State, rl 'a.State => 'c.State [label('a-move2)] .}
{'c.State, 'State, rl 'c.State => 'e.State [label('c-move)] .}
==========================================
reduce in META-LEVEL : metaSearchPath(['SEARCH], 'a.State, 'e.State, nil, '*,
    unbounded, 1) .
rewrites: 2
result Trace?: (failure).Trace?
==========================================
reduce in META-LEVEL : metaSearchPath(['ARITH], '_*_['_+_['a.Int, 'b.Int],
    '_+_['c.Int, 'd.Int]], '_+_['I:Int, 'J:Int, 'K:Int, 'L:Int], nil, '*,
    unbounded, 0) .
rewrites: 21
result Trace: {'_*_['_+_['a.Int, 'b.Int], '_+_['c.Int, 'd.Int]], 'Int, rl '_*_[
    'I:Int, '_+_['J:Int, 'K:Int]] => '_+_['_*_['I:Int, 'J:Int], '_*_['I:Int,
    'K:Int]] [none] .}
{'_+_['_*_['a.Int, '_+_['c.Int, 'd.Int]], '_*_['b.Int, '_+_['c.Int, 'd.Int]]],
    'Int, rl '_*_['I:Int, '_+_['J:Int, 'K:Int]] => '_+_['_*_['I:Int, 'J:Int],
    '_*_['I:Int, 'K:Int]] [none] .}
{'_+_['_*_['a.Int, 'c.Int], '_*_['a.Int, 'd.Int], '_*_['b.Int, '_+_['c.Int,
    'd.Int]]], 'Int, rl '_*_['I:Int, '_+_['J:Int, 'K:Int]] => '_+_['_*_['I:Int,
    'J:Int], '_*_['I:Int, 'K:Int]] [none] .}
Bye.
